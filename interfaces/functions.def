
#######################################
# The basic interface
#######################################

igraph_empty:
        PARAMS: OUT GRAPH graph, INTEGER n=0, BOOLEAN directed=True

igraph_add_edges:
        PARAMS: INOUT GRAPH graph, VECTOR edges, ATTRIBUTES attr
        NAME-R: add.edges
        IGNORE: RR, RC

igraph_add_vertices:
        PARAMS: INOUT GRAPH graph, INTEGER nv, ATTRIBUTES attr
        NAME-R: add.vertices
        IGNORE: RR, RC, RNamespace

igraph_delete_edges:
        PARAMS: INOUT GRAPH graph, EDGESET edges
        NAME-R: delete.edges
        DEPS: edges ON graph
        IGNORE: RR, RC, RNamespace

igraph_delete_vertices:
        PARAMS: INOUT GRAPH graph, VERTEXSET vertices
        NAME-R: delete.vertices
        IGNORE: RR, RC, RNamespace

igraph_vcount:
        PARAMS: GRAPH graph
        NAME-R: vcount
        RETURN: INTEGER

igraph_ecount:
        PARAMS: GRAPH graph
        NAME-R: ecount
        RETURN: INTEGER
        IGNORE: RR, RC, RNamespace

igraph_neighbors:
        PARAMS: GRAPH graph, OUT VECTOR neis, INTEGER vid, NEIMODE mode=ALL
        NAME-R: neighbors
        IGNORE: RR, RC, RNamespace

igraph_is_directed:
        PARAMS: GRAPH graph
        NAME-R: is.directed
        RETURN: BOOLEAN
        IGNORE: RR, RC, RNamespace

igraph_degree:
        PARAMS: GRAPH graph, OUT VECTOR res, VERTEXSET vids=ALL, NEIMODE mode=ALL, \ 
                BOOLEAN loops
        NAME-R: degree
        IGNORE: RR, RC, RNamespace

igraph_edge:
        PARAMS: GRAPH graph, INTEGER eid, OUT INTEGERPTR from, OUT INTEGERPTR to
        NAME-R: get.edge
        IGNORE: RR, RC, RNamespace

igraph_edges:
        PARAMS: GRAPH graph, EDGESET eids, OUT VECTOR edges
        NAME-R: get.edges
        DEPS: eids ON graph
        IGNORE: RR, RC, RNamespace

igraph_get_eid:
        PARAMS: GRAPH graph, OUT INTEGERPTR eid, INTEGER from, \
                INTEGER to, BOOLEAN directed=True, BOOLEAN error=True
        IGNORE: RR, RC, RNamespace

igraph_get_eids:
        PARAMS: GRAPH graph, OUT VECTOR eids, VECTOR pairs, \
                BOOLEAN directed=True, BOOLEAN error=True
        IGNORE: RR, RC, RNamespace

igraph_incident:
        PARAMS: GRAPH graph, OUT VECTOR eids, INTEGER vid, NEIMODE mode=ALL
        IGNORE: RR, RC, RNamespace

#######################################
# Constructors, deterministic
#######################################

igraph_create:
        PARAMS: OUT GRAPH graph, VECTOR edges, INTEGER n=0, BOOLEAN directed=True
        IGNORE: RR, RC, RNamespace

igraph_adjacency:
        PARAMS: OUT GRAPH graph, MATRIX adjmatrix, ADJACENCYMODE mode=DIRECTED
        IGNORE: RR, RC, RNamespace

igraph_weighted_adjacency:
        PARAMS: OUT GRAPH graph, MATRIX adjmatrix, \
                ADJACENCYMODE mode=DIRECTED, CSTRING attr="weight", \
                BOOLEAN loops
        IGNORE: RR, RC, RNamespace

igraph_star:
        PARAMS: OUT GRAPH graph, INTEGER n, STARMODE mode=OUT, INTEGER center=0
        IGNORE: RR, RC, RNamespace

igraph_lattice:
        PARAMS: OUT GRAPH graph, VECTOR dimvector, INTEGER nei=1, \
                BOOLEAN directed=False, BOOLEAN mutual=False, BOOLEAN circular=False
        IGNORE: RR, RC, RNamespace

igraph_ring:
        PARAMS: OUT GRAPH graph, INTEGER n, BOOLEAN directed=False, BOOLEAN mutual=False, \
                BOOLEAN circular=True
        IGNORE: RR, RC, RNamespace

igraph_tree:
        PARAMS: OUT GRAPH graph, INTEGER n, INTEGER children=2, TREEMODE type=OUT
        IGNORE: RR, RC, RNamespace

igraph_full:
        PARAMS: OUT GRAPH graph, INTEGER n, BOOLEAN directed=False, BOOLEAN loops=False
        IGNORE: RR, RC, RNamespace

igraph_full_citation:
        PARAMS: OUT GRAPH graph, INTEGER n, BOOLEAN directed=True
        GATTR-R: name IS Full citation graph

igraph_atlas:
        PARAMS: OUT GRAPH graph, INT number=0
        IGNORE: RR, RC, RNamespace

igraph_extended_chordal_ring:
        PARAMS: OUT GRAPH graph, INTEGER nodes, MATRIX W
        IGNORE: RR, RC, RNamespace

igraph_connect_neighborhood:
        PARAMS: INOUT GRAPH graph, INTEGER order=2, NEIMODE mode=ALL
        IGNORE: RR, RC, RNamespace

igraph_linegraph:
        PARAMS: GRAPH graph, OUT GRAPH linegraph
        IGNORE: RR, RC, RNamespace

igraph_de_bruijn:
        PARAMS: OUT GRAPH graph, INTEGER m, INTEGER n
        IGNORE: RR, RC, RNamespace

igraph_kautz:
        PARAMS: OUT GRAPH graph, INTEGER m, INTEGER n
        IGNORE: RR, RC, RNamespace

igraph_famous:
        PARAMS: OUT GRAPH graph, CSTRING name=""
        IGNORE: RR, RC, RNamespace

igraph_lcf_vector:
        PARAMS: OUT GRAPH graph, INTEGER n, VECTOR shifts, INTEGER repeats=1
        NAME-R: graph.lcf
        GATTR-R: name IS LCF graph

igraph_adjlist:
        PARAMS: OUT GRAPH graph, ADJLIST adjlist, NEIMODE mode=OUT, \
                BOOLEAN duplicate=True
        NAME-R: graph.adjlist

igraph_full_bipartite:
        PARAMS: OUT GRAPH graph, OUT VECTOR_BOOL_OR_0 types, INTEGER n1, \
                INTEGER n2, BOOLEAN directed=False, NEIMODE mode=ALL
        IGNORE: RR

#######################################
# Constructors, games
#######################################

igraph_barabasi_game:
        PARAMS: OUT GRAPH graph, INTEGER n, INTEGER m=1, REAL power=1.0, \
                VECTOR_OR_0 outseq, BOOLEAN outpref=False, REAL A=1.0, \
                BOOLEAN directed=True, BARABASI_ALGORITHM algo=BAG, \
                GRAPH_OR_0 start_from=0
        IGNORE: RR, RC, RNamespace

igraph_erdos_renyi_game_gnp:
        PARAMS: OUT GRAPH graph, INTEGER n, REAL p, BOOLEAN directed=False, BOOLEAN loops=False
        IGNORE: RR, RC, RNamespace

igraph_erdos_renyi_game_gnm:
        PARAMS: OUT GRAPH graph, INTEGER n, REAL m, BOOLEAN directed=False, BOOLEAN loops=False
        IGNORE: RR, RC, RNamespace

igraph_degree_sequence_game:
        PARAMS: OUT GRAPH graph, VECTOR out_deg, VECTOR_OR_0 in_deg, \
                DEGSEQMODE method=SIMPLE
        IGNORE: RR, RC, RNamespace

igraph_growing_random_game:
        PARAMS: OUT GRAPH graph, INTEGER n, INTEGER m=1, BOOLEAN directed=False, \
                BOOLEAN citation=False
        IGNORE: RR, RC, RNamespace

igraph_barabasi_aging_game:
        PARAMS: OUT GRAPH graph, INTEGER nodes, INTEGER m=1, VECTOR_OR_0 outseq, \
                BOOLEAN outpref=False, REAL pa_exp=1.0, REAL aging_exp=0.0, INTEGER aging_bin=1, \
                REAL zero_deg_appeal=1.0, REAL zero_age_appeal=0.0, REAL deg_coef=1.0, \
                REAL age_coef=1.0, BOOLEAN directed=True
        IGNORE: RR, RC, RNamespace

igraph_recent_degree_game:
        PARAMS: OUT GRAPH graph, INTEGER n, REAL power=1.0, INTEGER window=1, \
                INTEGER m=1, VECTOR_OR_0 outseq, BOOLEAN outpref=False, \
                REAL zero_appeal=1.0, BOOLEAN directed=True
        IGNORE: RR, RC, RNamespace

igraph_recent_degree_aging_game:
        PARAMS: OUT GRAPH graph, INTEGER nodes, INTEGER m=1, VECTOR_OR_0 outseq, \
                BOOLEAN outpref=False, REAL pa_exp=1.0, REAL aging_exp=0.0, INTEGER aging_bin=1, \
                INTEGER window=1, REAL zero_appeal=1.0, BOOLEAN directed=True
        IGNORE: RR, RC, RNamespace

igraph_callaway_traits_game:
        PARAMS: OUT GRAPH graph, INTEGER nodes, INTEGER types, \
                INTEGER edges_per_step=1, VECTOR type_dist, MATRIX pref_matrix, \
                BOOLEAN directed=False
        IGNORE: RR, RC, RNamespace

igraph_establishment_game:
        PARAMS: OUT GRAPH graph, INTEGER nodes, INTEGER types, INTEGER k=1, \
                VECTOR type_dist, MATRIX pref_matrix, BOOLEAN directed=True
        IGNORE: RR, RC, RNamespace

igraph_grg_game:
        PARAMS: OUT GRAPH graph, INTEGER nodes, REAL radius, BOOLEAN torus=False, VECTOR_OR_0 x, VECTOR_OR_0 y
        IGNORE: RR, RC, RNamespace

igraph_preference_game:
        PARAMS: OUT GRAPH graph, INTEGER nodes, INTEGER types, \
                VECTOR type_dist, BOOLEAN fixed_sizes=False, \
                MATRIX pref_matrix, OUT VECTOR node_type_vec, \
                BOOLEAN directed=False, BOOLEAN loops=False
        IGNORE: RR, RC, RNamespace

igraph_asymmetric_preference_game:
        PARAMS: OUT GRAPH graph, INTEGER nodes, INTEGER types, \
                MATRIX type_dist_matrix, MATRIX pref_matrix, \
                OUT VECTOR node_type_in_vec, OUT VECTOR node_type_out_vec, \
                BOOLEAN loops=False
        IGNORE: RR, RC, RNamespace

igraph_rewire_edges:
        PARAMS: INOUT GRAPH graph, REAL prob, BOOLEAN loops=False
        IGNORE: RR, RC, RNamespace

igraph_watts_strogatz_game:
        PARAMS: OUT GRAPH graph, INTEGER dim, INTEGER size, INTEGER nei, \
                REAL p, BOOLEAN loops=False, BOOLEAN multiple=False
        IGNORE: RR, RC, RNamespace

igraph_lastcit_game:
        PARAMS: OUT GRAPH graph, INTEGER nodes, INTEGER edges_per_node=1, \
                INTEGER agebins=1, VECTOR preference, BOOLEAN directed=True
        IGNORE: RR, RC, RNamespace

igraph_cited_type_game:
        PARAMS: OUT GRAPH graph, INTEGER nodes, VECTOR types, VECTOR pref, \
                INTEGER edges_per_step=1, BOOLEAN directed=True
        IGNORE: RR, RC, RNamespace

igraph_citing_cited_type_game:
        PARAMS: OUT GRAPH graph, INTEGER nodes, VECTOR types, MATRIX pref, \
                INTEGER edges_per_step=1, BOOLEAN directed=True
        IGNORE: RR, RC, RNamespace

igraph_forest_fire_game:
        PARAMS: OUT GRAPH graph, INTEGER nodes, REAL fw_prob, REAL bw_factor=1, \
                INTEGER ambs=1, BOOLEAN directed=True
        NAME-R: forest.fire.game
        GATTR-R: name IS Forest fire model
        GATTR-PARAM-R: fw_prob, bw_factor, ambs
        FLAGS: PROGRESS

igraph_simple_interconnected_islands_game:
        PARAMS: OUT GRAPH graph, INTEGER islands_n, INTEGER islands_size, \
                REAL islands_pin, INTEGER n_inter
        NAME-R: interconnected.islands.game
        GATTR-R: name IS Interconnected islands model
        GATTR-PARAM-R: islands_n, islands_size, islands_pin, n_inter
        IGNORE: RC

igraph_static_fitness_game:
        PARAMS: OUT GRAPH graph, INTEGER no_of_edges, VECTOR fitness_out, \
                VECTOR_OR_0 fitness_in=NULL, BOOLEAN loops=False, \
                BOOLEAN multiple=False
        NAME-R: static.fitness.game
        GATTR-R: name IS Static fitness model
        GATTR-PARAM-R: loops, multiple
        FLAGS: PROGRESS

igraph_static_power_law_game:
        PARAMS: OUT GRAPH graph, INTEGER no_of_nodes, INTEGER no_of_edges, \
                REAL exponent_out, REAL exponent_in=-1, \
                BOOLEAN loops=False, BOOLEAN multiple=False, \
		BOOLEAN finite_size_correction=True
        NAME-R: static.power.law.game
        GATTR-R: name IS Static power law model
        GATTR-PARAM-R: exponent_out, exponent_in, loops, multiple, \
                       finite_size_correction
        FLAGS: PROGRESS
                
igraph_k_regular_game:
        PARAMS: OUT GRAPH graph, INTEGER no_of_nodes, INTEGER k, \
                BOOLEAN directed=False, BOOLEAN multiple=False
        NAME-R: k.regular.game
        GATTR-R: name IS k-regular graph
        GATTR-PARAM-R: k

igraph_sbm_game:
        PARAMS: OUT GRAPH graph, INTEGER n, MATRIX pref_matrix, \
                VECTOR_INT block_sizes, BOOLEAN directed=False, \
                BOOLEAN loops=False
        NAME-R: sbm.game
        GATTR-R: name IS Stochastic block-model
        GATTR-PARAM-R: loops

#######################################
# Basic query functions
#######################################

igraph_are_connected:
        PARAMS: GRAPH graph, INTEGER v1, INTEGER v2, OUT BOOLEANPTR res
        IGNORE: RR, RC, RNamespace

#######################################
# Structural properties
#######################################

igraph_diameter:
        PARAMS: GRAPH graph, OUT INTEGERPTR res, OUT INTEGERPTR from, \
                OUT INTEGERPTR to, OUT VECTOR_OR_0 path, BOOLEAN directed=True, \
                BOOLEAN unconnected=True
        IGNORE: RR, RC, RNamespace

igraph_diameter_dijkstra:
        PARAMS: GRAPH graph, EDGEWEIGHTS weights=NULL, \
                OUT INTEGERPTR res, OUT INTEGERPTR from, \
                OUT INTEGERPTR to, OUT VECTOR_OR_0 path, BOOLEAN directed=True, \
                BOOLEAN unconnected=True
        DEPS: weights ON graph
        IGNORE: RR, RC, RNamespace

igraph_minimum_spanning_tree:
        PARAMS: GRAPH graph, OUT VECTOR res, EDGEWEIGHTS weights=NULL
        DEPS: weights ON graph
        IGNORE: RR, RC, RNamespace

igraph_minimum_spanning_tree_unweighted:
        PARAMS: GRAPH graph, OUT GRAPH mst
        IGNORE: RR, RC, RNamespace

igraph_minimum_spanning_tree_prim:
        PARAMS: GRAPH graph, OUT GRAPH mst, VECTOR weights
        IGNORE: RR, RC, RNamespace

igraph_closeness:
        PARAMS: GRAPH graph, OUT VECTOR res, VERTEXSET vids=ALL, \
                NEIMODE mode=OUT, EDGEWEIGHTS weights=NULL, \
                BOOLEAN normalized=False
        DEPS: vids ON graph, weights ON graph
        NAME-R: closeness
        IGNORE: RR

igraph_closeness_estimate:
        PARAMS: GRAPH graph, OUT VERTEXINDEX res, VERTEXSET vids=ALL, \
                NEIMODE mode=OUT, REAL cutoff, EDGEWEIGHTS weights=NULL, \
                BOOLEAN normalized=False
        DEPS: vids ON graph, weights ON graph, res ON graph vids
        NAME-R: closeness.estimate

igraph_shortest_paths:
        PARAMS: GRAPH graph, OUT MATRIX res, VERTEXSET from=ALL, \
                VERTEXSET to=ALL, NEIMODE mode=OUT
        IGNORE: RR, RC, RNamespace

igraph_get_shortest_paths:
        PARAMS: GRAPH graph, OUT VERTEXSETLIST_OR_0 vertices, 
                OUT EDGESETLIST_OR_0 edges, VERTEX from, VERTEXSET to=ALL, \
                NEIMODE mode=OUT, OUT VECTOR_LONG_OR_0 predecessors=0, \
                OUT VECTOR_LONG_OR_0 inbound_edges=0
        DEPS: vertices ON graph, edges ON graph, from ON graph, to ON graph
        IGNORE: RR, RC, RNamespace

igraph_get_all_shortest_paths:
        PARAMS: GRAPH graph, OUT VERTEXSETLIST res, OUT VECTOR nrgeo, \
                VERTEX from, VERTEXSET to, NEIMODE mode=OUT
        DEPS: res ON graph, from ON graph, to ON graph
        IGNORE: RR, RNamespace

igraph_shortest_paths_dijkstra:
        PARAMS: GRAPH graph, OUT MATRIX res, VERTEXSET from=ALL, \
                VERTEXSET to=ALL, EDGEWEIGHTS weights, NEIMODE mode=OUT
        IGNORE: RR, RC, RNamespace

igraph_get_shortest_paths_dijkstra:
        PARAMS: GRAPH graph, OUT VERTEXSETLIST_OR_0 vertices, \
                OUT EDGESETLIST_OR_0 edges, VERTEX from, VERTEXSET to=ALL, \
                EDGEWEIGHTS weights=NULL, NEIMODE mode=OUT, \
                OUT VECTOR_LONG_OR_0 predecessors=0, \
                OUT VECTOR_LONG_OR_0 inbound_edges=0
        DEPS: vertices ON graph, edges ON graph, from ON graph, to ON graph,\
              weights ON graph
        IGNORE: RR, RC, RNamespace

igraph_get_all_shortest_paths_dijkstra:
        PARAMS: GRAPH graph, OUT VERTEXSETLIST res, OUT VECTOR nrgeo, \
                VERTEX from, VERTEXSET to=ALL, EDGEWEIGHTS weights, \
                NEIMODE mode=OUT
        DEPS: weights ON graph, to ON graph, res ON graph, from ON graph
        IGNORE: RR, RNamespace

igraph_shortest_paths_bellman_ford:
        PARAMS: GRAPH graph, OUT MATRIX res, VERTEXSET from=ALL, \
                VERTEXSET to=ALL, EDGEWEIGHTS weights, NEIMODE mode=OUT
        DEPS: from ON graph, to ON graph, weights ON graph
        IGNORE: RR, RC, RNamespace

igraph_shortest_paths_johnson:
        PARAMS: GRAPH graph, OUT MATRIX res, VERTEXSET from=ALL, \
                VERTEXSET to=ALL, EDGEWEIGHTS weights
        IGNORE: RR, RC, RNamespace

igraph_subcomponent: 
        PARAMS: GRAPH graph, OUT VERTEXSET res, VERTEX vid, NEIMODE mode=ALL
        IGNORE: RR, RC, RNamespace

igraph_betweenness:
        PARAMS: GRAPH graph, OUT VECTOR res, VERTEXSET vids=ALL, \
                BOOLEAN directed=True, EDGEWEIGHTS weights=NULL, \
                BOOLEAN nobigint=True
        IGNORE: RR, RC, RNamespace
        DEPS: weights ON graph
        FLAGS: PROGRESS

igraph_betweenness_estimate:
        PARAMS: GRAPH graph, OUT VERTEXINDEX res, VERTEXSET vids=ALL, \
                BOOLEAN directed=True, REAL cutoff, EDGEWEIGHTS weights=NULL, \
                BOOLEAN nobigint=True
        DEPS: vids ON graph, weights ON graph, res ON graph vids
        NAME-R: betweenness.estimate
        FLAGS: PROGRESS

igraph_edge_betweenness:
        PARAMS: GRAPH graph, OUT VECTOR res, BOOLEAN directed=True, \
                EDGEWEIGHTS weights=NULL
        DEPS: weights ON graph
        NAME-R: edge.betweenness
        IGNORE: RR

igraph_edge_betweenness_estimate:
        PARAMS: GRAPH graph, OUT VECTOR res, BOOLEAN directed=True, \
                REAL cutoff, EDGEWEIGHTS weights=NULL
        DEPS: weights ON graph
        NAME-R: edge.betweenness.estimate
        IGNORE: RR

igraph_pagerank_old:
        PARAMS: GRAPH graph, OUT VERTEXINDEX res, VERTEXSET vids=ALL, \
                BOOLEAN directed=True, INTEGER niter=1000, REAL eps=0.001, \
                REAL damping=0.85, BOOLEAN old=False
        DEPS: vids ON graph, res ON graph vids
        NAME-R: page.rank.old

igraph_pagerank:
        PARAMS: GRAPH graph, PAGERANKALGO algo=PRPACK, \
                OUT VERTEXINDEX vector, OUT REALPTR value, \
                VERTEXSET vids=ALL, BOOLEAN directed=True, \
                REAL damping=0.85, EDGEWEIGHTS weights=NULL, \
                INOUT PAGERANKOPT options=NULL
        DEPS: vids ON graph, weights ON graph, vector ON graph vids \
              options ON algo
        NAME-R: page.rank
        IGNORE: RR, RC, RNamespace

igraph_personalized_pagerank:
        PARAMS: GRAPH graph, PAGERANKALGO algo=PRPACK, \
                OUT VERTEXINDEX vector, OUT REALPTR value, \
                VERTEXSET vids=ALL, BOOLEAN directed=True, \
                REAL damping=0.85, VECTOR_OR_0 personalized=NULL, \
		VECTOR_OR_0 personalizeddangling=personalized, \
                EDGEWEIGHTS weights=NULL, \
                INOUT PAGERANKOPT options=NULL
        DEPS: vids ON graph, weights ON graph, vector ON graph vids, \
              options ON algo
        NAME-R: page.rank

igraph_rewire:
        PARAMS: INOUT GRAPH rewire, INTEGER n, REWIRINGMODE mode=SIMPLE
        IGNORE: RR, RC, RNamespace

igraph_induced_subgraph:
        PARAMS: GRAPH graph, OUT GRAPH res, VERTEXSET vids, SUBGRAPH_IMPL impl=AUTO
        DEPS: vids ON graph
        NAME-R: induced.subgraph

igraph_subgraph:
        PARAMS: GRAPH graph, OUT GRAPH res, VERTEXSET vids
        IGNORE: RR, RC, RNamespace

igraph_subgraph_edges:
        PARAMS: GRAPH graph, OUT GRAPH res, EDGESET eids, BOOLEAN delete_vertices=True
        DEPS: eids ON graph
        NAME-R: subgraph.edges

igraph_average_path_length:
        PARAMS: GRAPH graph, OUT REALPTR res, BOOLEAN directed=True, BOOLEAN unconn=True
        IGNORE: RR, RC, RNamespace

igraph_path_length_hist:
        PARAMS: GRAPH graph, OUT VECTOR res, OUT REALPTR unconnected, \
                BOOLEAN directed=True
        NAME-R: path.length.hist
        FLAGS: PROGRESS

igraph_simplify:
        PARAMS: INOUT GRAPH graph, BOOLEAN remove_multiple=True, \
                BOOLEAN remove_loops=True, \
		EDGE_ATTRIBUTE_COMBINATION edge_attr_comb=Default
        NAME-R: simplify

igraph_transitivity_undirected:
        PARAMS: GRAPH graph, OUT REALPTR res, TRANSITIVITYMODE mode=NAN
        IGNORE: RR, RC, RNamespace

igraph_transitivity_local_undirected:
        PARAMS: GRAPH graph, OUT VECTOR res, VERTEXSET vids=ALL, TRANSITIVITYMODE mode=NAN
        IGNORE: RR, RC, RNamespace

igraph_transitivity_avglocal_undirected:
        PARAMS: GRAPH graph, OUT REALPTR res, TRANSITIVITYMODE mode=NAN
        IGNORE: RR, RC, RNamespace

igraph_transitivity_barrat:
        PARAMS: GRAPH graph, OUT VECTOR res, VERTEXSET vids=ALL, \
                EDGEWEIGHTS weights=NULL, TRANSITIVITYMODE mode=NAN
        DEPENDS: weights ON graph
        IGNORE: RR, RC, RNamespace

igraph_reciprocity:
        PARAMS: GRAPH graph, OUT REALPTR res, BOOLEAN ignore_loops=True, \
                RECIP mode=Default
        IGNORE: RR, RC, RNamespace

igraph_constraint:
        PARAMS: GRAPH graph, OUT VECTOR res, VERTEXSET vids=ALL, VECTOR_OR_0 weights
        IGNORE: RR, RC, RNamespace

igraph_maxdegree:
        PARAMS: GRAPH graph, OUT INTEGERPTR res, VERTEXSET vids=ALL, NEIMODE mode=ALL, \
                BOOLEAN loops=True
        IGNORE: RR, RC, RNamespace

igraph_density:
        PARAMS: GRAPH graph, OUT REALPTR res, BOOLEAN loops=False
        IGNORE: RR, RC, RNamespace

igraph_neighborhood_size:
        PARAMS: GRAPH graph, OUT VECTOR res, VERTEXSET vids, INTEGER order, \
                NEIMODE mode=ALL
        DEPS: vids ON graph
        IGNORE: RR, RC, RNamespace

igraph_neighborhood:
        PARAMS: GRAPH graph, OUT VERTEXSETLIST res, \
                VERTEXSET vids, INTEGER order, \
                NEIMODE mode=ALL
        DEPS res ON graph, vids ON graph
        IGNORE: RR, RC, RNamespace

igraph_neighborhood_graphs:
        PARAMS: GRAPH graph, OUT GRAPHLIST res, VERTEXSET vids, \
                INTEGER order, \
                NEIMODE mode=ALL
        DEPS: vids ON graph
        IGNORE: RR, RC, RNamespace

igraph_topological_sorting:
        PARAMS: GRAPH graph, OUT VECTOR res, NEIMODE mode=OUT
        IGNORE: RR, RC, RNamespace

igraph_is_loop:
        PARAMS: GRAPH graph, OUT VECTOR_BOOL res, EDGESET es=ALL
        DEPS: es ON graph
        IGNORE: RR, RC, RNamespace

igraph_is_dag:
        PARAMS: GRAPH graph, OUT BOOLEANPTR res
        NAME-R: is.dag

igraph_is_simple:
        PARAMS: GRAPH graph, OUT BOOLEANPTR res
        NAME-R: is.simple

igraph_is_multiple:
        PARAMS: GRAPH graph, OUT VECTOR_BOOL res, EDGESET es=ALL
        DEPS: es ON graph
        IGNORE: RR, RC, RNamespace

igraph_has_multiple:
        PARAMS: GRAPH graph, OUT BOOLEANPTR res
        NAME-R: has.multiple

igraph_count_multiple:
        PARAMS: GRAPH graph, OUT VECTOR res, EDGESET es=ALL
        DEPS: es ON graph
        IGNORE: RR, RC, RNamespace

igraph_girth:
        PARAMS: GRAPH graph, OUT INTEGERPTR girth, OUT VERTEXSET circle
        IGNORE: RR, RC, RNamespace

igraph_add_edge:
        PARAMS: INOUT GRAPH graph, INTEGER from, INTEGER to
        IGNORE: RR, RC, RNamespace

igraph_eigenvector_centrality:
        PARAMS: GRAPH graph, OUT VERTEXINDEX vector, OUT REALPTR value, \
                BOOLEAN directed=False, BOOLEAN scale=True, \
                EDGEWEIGHTS weights=NULL, \
                INOUT ARPACKOPT options=igraph.arpack.default
        DEPS: weights ON graph, vector ON graph
        DEFAULT-R: options=igraph.arpack.default
        NAME-R: evcent

igraph_hub_score:
        PARAMS: GRAPH graph, OUT VERTEXINDEX vector, OUT REALPTR value, \
                BOOLEAN scale=True, EDGEWEIGHTS weights=NULL, \
                INOUT ARPACKOPT options=igraph.arpack.default
        DEFAULT-R: options=igraph.arpack.default
        DEPS: weights ON graph, vector ON graph
        NAME-R: hub.score

igraph_authority_score:
        PARAMS: GRAPH graph, OUT VERTEXINDEX vector, OUT REALPTR value, \
                BOOLEAN scale=True, EDGEWEIGHTS weights=NULL, \
                INOUT ARPACKOPT options=igraph.arpack.default
        DEFAULT-R: options=igraph.arpack.default
        DEPS: weights ON graph, vector ON graph
        NAME-R: authority.score

igraph_arpack_rssolve:
        PARAMS: ARPFUNC fun, EXTRA extra, INOUT ARPACKOPT options=igraph.arpack.default, \
                NULL storage, OUT VECTOR_OR_0 values, \
                OUT MATRIX_OR_0 vectors
        DEFAULT-R: options=igraph.arpack.default
        IGNORE: RR, RC, RNamespace

igraph_arpack_rnsolve:
        PARAMS: ARPFUNC fun, EXTRA extra, INOUT ARPACKOPT options=igraph.arpack.default, \
                NULL storage, OUT VECTOR_OR_0 values, \
                OUT MATRIX_OR_0 vectors
        DEFAULT-R: options=igraph.arpack.default
        IGNORE: RR, RC, RNamespace

igraph_arpack_unpack_complex:
         PARAMS: INOUT MATRIX vectors, INOUT MATRIX values, INTEGER nev
         NAME-R: arpack.unpack.complex

igraph_unfold_tree:
        PARAMS: GRAPH graph, OUT GRAPH tree, NEIMODE mode=ALL, VECTOR roots,\
                OUT VECTORM1_OR_0 vertex_index
        NAME-R: unfold.tree
        IGNORE: RR

igraph_is_mutual:
        PARAMS: GRAPH graph, OUT VECTOR_BOOL res, EDGESET es=ALL
        DEPS: es ON graph
        NAME-R: is.mutual

igraph_maximum_cardinality_search:
        PARAMS: GRAPH graph, OUT VECTORM1 alpha, OUT VECTORM1_OR_0 alpham1
        NAME-R: maximum.cardinality.search

igraph_is_chordal:
        PARAMS: GRAPH graph, VECTORM1_OR_0 alpha=NULL, VECTORM1_OR_0 alpham1=NULL, \
                OUT BOOLEANPTR_OR_0 chordal, OUT VECTORM1_OR_0 fillin, \
                OUT GRAPH_OR_0 newgraph
        NAME-R: is.chordal
        IGNORE: RR, RC

igraph_avg_nearest_neighbor_degree:
        PARAMS: GRAPH graph, VERTEXSET vids=ALL, OUT VERTEXINDEX_OR_0 knn, \
                OUT VECTOR_OR_0 knnk, EDGEWEIGHTS weights=NULL
        DEPS: vids ON graph, weights ON graph, knn ON graph vids
        NAME-R: graph.knn

igraph_strength:
        PARAMS: GRAPH graph, OUT VERTEXINDEX res, VERTEXSET vids=ALL, \
                NEIMODE mode=ALL, BOOLEAN loops=True, EDGEWEIGHTS weights=NULL
        DEPS: vids ON graph, weights ON graph, res ON graph vids

igraph_centralization:
        PARAMS: VECTOR scores, REAL theoretical_max=0, BOOLEAN normalized=True
        RETURN: REAL
        NAME-R: centralize.scores

igraph_centralization_degree:
        PARAMS: GRAPH graph, OUT VECTOR res, \
                NEIMODE mode=ALL, BOOLEAN loops=True, \
                OUT REALPTR centralization, OUT REALPTR theoretical_max, \
                BOOLEAN normalized=True
        NAME-R: centralization.degree

igraph_centralization_degree_tmax:
        PARAMS: GRAPH_OR_0 graph=NULL, INTEGER nodes=0, NEIMODE mode=ALL, \
                BOOLEAN loops=False, OUT REALPTR res
        NAME-R: centralization.degree.tmax

igraph_centralization_betweenness:
        PARAMS: GRAPH graph, OUT VECTOR res, \
                BOOLEAN directed=True, BOOLEAN nobigint=True, \
                OUT REALPTR centralization, \
                OUT REALPTR theoretical_max, \
                BOOLEAN normalized=True
        NAME-R: centralization.betweenness

igraph_centralization_betweenness_tmax:
        PARAMS: GRAPH_OR_0 graph=NULL, INTEGER nodes=0, \
                BOOLEAN directed=True, OUT REALPTR res
        NAME-R: centralization.betweenness.tmax

igraph_centralization_closeness:
        PARAMS: GRAPH graph, OUT VECTOR res, \
                NEIMODE mode=OUT, OUT REALPTR centralization, \
                OUT REALPTR theoretical_max, \
                BOOLEAN normalized=True
        NAME-R: centralization.closeness

igraph_centralization_closeness_tmax:
        PARAMS: GRAPH_OR_0 graph=NULL, INTEGER nodes=0, \
                NEIMODE mode=OUT, OUT REALPTR res
        NAME-R: centralization.closeness.tmax

igraph_centralization_eigenvector_centrality:
        PARAMS: GRAPH graph, OUT VECTOR vector, OUT REALPTR value, \
                BOOLEAN directed=False, BOOLEAN scale=True, \
                INOUT ARPACKOPT options=igraph.arpack.default, \
                OUT REALPTR centralization, OUT REALPTR theoretical_max,\
                BOOLEAN normalized=True
        NAME-R: centralization.evcent

igraph_centralization_eigenvector_centrality_tmax:
        PARAMS: GRAPH_OR_0 graph=NULL, INTEGER nodes=0, \
                BOOLEAN directed=False, BOOLEAN scale=True, \
                OUT REALPTR res
        NAME-R: centralization.evcent.tmax

igraph_assortativity_nominal:
        PARAMS: GRAPH graph, VECTORM1 types, OUT REALPTR res, \
                BOOLEAN directed=True
        NAME-R: assortativity.nominal

igraph_assortativity:
        PARAMS: GRAPH graph, VECTOR types1, VECTOR_OR_0 types2=NULL, \
                OUT REALPTR res, BOOLEAN directed=True
        NAME-R: assortativity

igraph_assortativity_degree:
        PARAMS: GRAPH graph, OUT REALPTR res, BOOLEAN directed=True
        NAME-R: assortativity.degree

igraph_contract_vertices:
        PARAMS: INOUT GRAPH graph, VECTORM1 mapping, \
                VERTEX_ATTRIBUTE_COMBINATION vertex_attr_comb=Default
        NAME-R: contract.vertices

igraph_eccentricity:
        PARAMS: GRAPH graph, OUT VERTEXINDEX res, VERTEXSET vids=ALL, \
                NEIMODE mode=ALL
        DEPS: vids ON graph, res ON graph vids
        NAME-R: eccentricity

igraph_radius:
        PARAMS: GRAPH graph, OUT REALPTR radius, NEIMODE mode=ALL
        NAME-R: radius

igraph_diversity:
        PARAMS: GRAPH graph, EDGEWEIGHTS weights=NULL, OUT VERTEXINDEX res, \
                VERTEXSET vids=ALL
        DEPS: weights ON graph, vids ON graph, res ON graph vids

#######################################
# Degree sequences     
#######################################

igraph_is_degree_sequence:
        PARAMS: VECTOR out_deg, VECTOR_OR_0 in_deg=NULL, OUT BOOLEANPTR res
        NAME-R: is.degree.sequence

igraph_is_graphical_degree_sequence:
        PARAMS: VECTOR out_deg, VECTOR_OR_0 in_deg=NULL, OUT BOOLEANPTR res
        NAME-R: is.graphical.degree.sequence

#######################################
# Visitors
#######################################

igraph_bfs:
        PARAMS: GRAPH graph, INTEGER root, VECTOR_OR_0 roots, \
                NEIMODE mode=OUT, BOOLEAN unreachable, \
                VECTOR_OR_0 restricted, \
                OUT VECTOR_OR_0 order, OUT VECTOR_OR_0 rank, \
                OUT VECTOR_OR_0 father, \
                OUT VECTOR_OR_0 pred, OUT VECTOR_OR_0 succ, \
                OUT VECTOR_OR_0 dist, BFS_FUNC callback, NULL extra
        IGNORE: RR, RC

igraph_dfs:
        PARAMS: GRAPH graph, INTEGER root, NEIMODE mode=OUT, \
                BOOLEAN unreachable, \
                OUT VECTOR_OR_0 order, OUT VECTOR_OR_0 order_out, \
                OUT VECTOR_OR_0 dist, DFS_FUNC in_callback, \
                DFS_FUNC out_callback, NULL extra
        IGNORE: RR, RC

#######################################
# Bipartite graphs
#######################################

igraph_bipartite_projection_size:
        PARAMS: GRAPH graph, BIPARTITE_TYPES types=NULL, \
                OUT INTEGERPTR vcount1, OUT INTEGERPTR ecount1, \
                OUT INTEGERPTR vcount2, OUT INTEGERPTR ecount2
        DEPS: types ON graph
        NAME-R: bipartite.projection.size

igraph_bipartite_projection:
        PARAMS: GRAPH graph, BIPARTITE_TYPES types=NULL, \
                OUT GRAPH proj1, OUT GRAPH proj2, \
                OUT VECTOR_OR_0 multiplicity1, \
                OUT VECTOR_OR_0 multiplicity2, INTEGER probe1=-1
        DEPS: types ON graph
        NAME-R: bipartite.projection
        IGNORE: RR, RC

igraph_create_bipartite:
        PARAMS: OUT GRAPH graph, IN VECTOR_BOOL types, \
                VECTORM1 edges, BOOLEAN directed=False
        NAME-R: graph.bipartite
        IGNORE: RR

igraph_incidence:
        PARAMS: OUT GRAPH graph, OUT VECTOR_BOOL types, MATRIX incidence, \
                BOOLEAN directed=False, NEIMODE mode=ALL, \
                BOOLEAN multiple=False
        IGNORE: RR

igraph_get_incidence:
        PARAMS: GRAPH graph, BIPARTITE_TYPES types=NULL, OUT MATRIX res, \
                OUT VECTOR_OR_0 row_ids, OUT VECTOR_OR_0 col_ids
        DEPS: types ON graph
        NAME-R: get.incidence
        IGNORE: RR

igraph_is_bipartite:
        PARAMS: GRAPH graph, OUT BOOLEANPTR res, OUT VECTOR_BOOL_OR_0 type
        NAME-R: bipartite.mapping

igraph_bipartite_game_gnp:
        PARAMS: OUT GRAPH graph, OUT VECTOR_BOOL_OR_0 types, \
                INTEGER n1, INTEGER n2, REAL p, BOOLEAN directed, \
                NEIMODE mode
        IGNORE: RR, RNamespace

igraph_bipartite_game_gnm:
        PARAMS: OUT GRAPH graph, OUT VECTOR_BOOL_OR_0 types, \
                INTEGER n1, INTEGER n2, INTEGER m, BOOLEAN directed, \
                NEIMODE mode
        IGNORE: RR, RNamespace

#######################################
# Spectral properties
#######################################

igraph_laplacian:
        PARAMS: GRAPH graph, OUT MATRIX_OR_0 res, \
                OUT SPARSEMAT_OR_0 sparseres, BOOLEAN normalized=False, \
                EDGEWEIGHTS weights=NULL
        DEPS: weights ON graph
        IGNORE: RR, RC

#######################################
# Components
#######################################

igraph_clusters:
        PARAMS: GRAPH graph, OUT VECTOR membership, OUT VECTOR csize, \
                OUT INTEGERPTR no, CONNECTEDNESS mode=WEAK
        NAME-R: clusters
        IGNORE: RR

igraph_is_connected:
        PARAMS: GRAPH graph, OUT BOOLEANPTR res, CONNECTEDNESS mode=WEAK
        IGNORE: RR, RC, RNamespace

igraph_decompose:
        PARAMS: GRAPH graph, OUT GRAPHLIST components, CONNECTEDNESS mode=WEAK, \
                LONGINT maxcompno=-1, LONGINT minelements=1
        IGNORE: RR, RC, RNamespace

igraph_articulation_points:
        PARAMS: GRAPH graph, OUT VERTEXSET res
        DEPS: res ON graph
        NAME-R: articulation.points

igraph_biconnected_components:
        PARAMS: GRAPH graph, OUT INTEGERPTR no, \
                OUT EDGESETLIST_OR_0 tree_edges, \
                OUT EDGESETLIST_OR_0 component_edges, \
                OUT VERTEXSETLIST_OR_0 components, \
                OUT VERTEXSET articulation_points
        DEPS: tree_edges ON graph, component_edges ON graph, \
              components ON graph
        NAME-R: biconnected.components

#######################################
# Cliques
#######################################

igraph_cliques:
        PARAMS: GRAPH graph, OUT VERTEXSETLIST res, INTEGER min_size=0, \
                INTEGER max_size=0
        DEPS: res ON graph
        IGNORE: RR, RC, RNamespace

igraph_largest_cliques:
        PARAMS: GRAPH graph, OUT VERTEXSETLIST res
        DEPS: res ON graph
        IGNORE: RR, RC, RNamespace

igraph_maximal_cliques:
        PARAMS: GRAPH graph, OUT VERTEXSETLIST res
        DEPS: res ON graph
        IGNORE: RR, RC, RNamespace

igraph_maximal_cliques_count:
        PARAMS: GRAPH graph, OUT INTEGERPTR no, INTEGER min_size=0, \
                INTEGER max_size=0
        NAME-R: maximal.cliques.count
        IGNORE: RR, RC

igraph_maximal_cliques_file:
        PARAMS: GRAPH graph, OUTFILE res, INTEGER min_size=0, \
                INTEGER max_size=0
        NAME-R: maximal.cliques.file
        IGNORE: RR, RC, RNamespace

igraph_clique_number:
        PARAMS: GRAPH graph, OUT INTEGERPTR no
        IGNORE: RR, RC, RNamespace

igraph_independent_vertex_sets:
        PARAMS: GRAPH graph, OUT VERTEXSETLIST res, INTEGER min_size=0, \
                INTEGER max_size=0
        DEPS: res ON graph
        IGNORE: RR, RC, RNamespace

igraph_largest_independent_vertex_sets:
        PARAMS: GRAPH graph, OUT VERTEXSETLIST res
        DEPS: res ON graph
        IGNORE: RR, RC, RNamespace

igraph_maximal_independent_vertex_sets:
        PARAMS: GRAPH graph, OUT VERTEXSETLIST res
        DEPS: res ON graph
        IGNORE: RR, RC, RNamespace

igraph_independence_number:
        PARAMS: GRAPH graph, OUT INTEGERPTR no
        IGNORE: RR, RC, RNamespace

#######################################
# Layouts
#######################################

igraph_layout_random:
        PARAMS: GRAPH graph, OUT MATRIX res
        IGNORE: RR, RC, RNamespace

igraph_layout_circle:
        PARAMS: GRAPH graph, OUT MATRIX res
        IGNORE: RR, RC, RNamespace

igraph_layout_star:
        PARAMS: GRAPH graph, OUT MATRIX res, VERTEX center=V(graph)[1], \
                VECTORM1_OR_0 order=NULL
        DEPS: center ON graph
        NAME-R: layout.star

igraph_layout_grid:
        PARAMS: GRAPH graph, OUT MATRIX res, INTEGER width=0
        NAME-R: layout.grid

igraph_layout_grid_3d:
        PARAMS: GRAPH graph, OUT MATRIX res, INTEGER width=0, INTEGER height=0
        NAME-R: layout.grid.3d

igraph_layout_fruchterman_reingold:
        PARAMS: GRAPH graph, OUT MATRIX res, INTEGER niter=500, \
                REAL maxdelta=VCOUNT(graph), REAL area=VCOUNT(graph)^2, \
                REAL coolexp=1.5, REAL repulserad=VCOUNT(graph)^3, \
                NULL use_seed, VECTOR_OR_0 weight, \
                VECTOR_OR_0 minx, VECTOR_OR_0 maxx, \
                VECTOR_OR_0 miny, VECTOR_OR_0 maxy
        NAME-R: layout.fruchterman.reingold
        FLAGS: PROGRESS
        IGNORE: RR, RC

igraph_layout_grid_fruchterman_reingold:
        PARAMS: GRAPH graph, OUT MATRIX res, INTEGER niter=500, REAL maxdelta=VCOUNT(graph), \
                REAL area=VCOUNT(graph)^2, REAL coolexp=1.5, REAL repulserad=VCOUNT(graph)^3, REAL cellsize=VCOUNT(graph), \
                NULL use_seed, VECTOR_OR_0 weight
        IGNORE: RR, RC, RNamespace

igraph_layout_kamada_kawai:
        PARAMS: GRAPH graph, OUT MATRIX res, INTEGER niter=1000, \
                REAL sigma=VCOUNT(graph)/4, REAL initemp=10, \
                REAL coolexp=0.99, REAL kkconst=VCOUNT(graph)^2, \
                VECTOR_OR_0 minx, VECTOR_OR_0 maxx, VECTOR_OR_0 miny, \
                VECTOR_OR_0 maxy
        IGNORE: RR, RC, RNamespace

igraph_layout_lgl:
        PARAMS: GRAPH graph, OUT MATRIX res, INTEGER maxiter=150, REAL maxdelta=VCOUNT(graph), \
                REAL area=VCOUNT(graph)^2, REAL coolexp=1.5, REAL repulserad=VCOUNT(graph)^3, REAL cellsize=VCOUNT(graph), \
                INTEGER root=-1
        IGNORE: RR, RC, RNamespace

igraph_layout_reingold_tilford:
        PARAMS: GRAPH graph, OUT MATRIX res, NEIMODE mode=OUT, VECTOR roots
        IGNORE: RR, RC, RNamespace

igraph_layout_reingold_tilford_circular:
        PARAMS: GRAPH graph, OUT MATRIX res, NEIMODE mode=OUT, VECTOR roots
        IGNORE: RR, RC, RNamespace

igraph_layout_random_3d:
        PARAMS: GRAPH graph, OUT MATRIX res
        IGNORE: RR, RC, RNamespace

igraph_layout_sphere:
        PARAMS: GRAPH graph, OUT MATRIX res
        IGNORE: RR, RC, RNamespace

igraph_layout_fruchterman_reingold_3d:
        PARAMS: GRAPH graph, OUT MATRIX res, INTEGER niter=500, \
                REAL maxdelta=VCOUNT(graph), REAL volume=VCOUNT(graph)^2, \
                REAL coolexp=1.5, REAL repulserad=VCOUNT(graph)^3, \
                NULL use_seed, VECTOR_OR_0 weight, VECTOR_OR_0 minx, \
                VECTOR_OR_0 maxx, VECTOR_OR_0 miny, VECTOR_OR_0 maxy, \
                VECTOR_OR_0 minz, VECTOR_OR_0 maxz
        IGNORE: RR, RC, RNamespace

igraph_layout_kamada_kawai_3d:
        PARAMS: GRAPH graph, OUT MATRIX res, INTEGER niter=1000, \
                REAL sigma=VCOUNT(graph)/4, REAL initemp=10, \
                REAL coolexp=0.99, REAL kkconst=VCOUNT(graph)^2, \
                BOOLEAN fixz, VECTOR_OR_0 minx, VECTOR_OR_0 maxx, \
                VECTOR_OR_0 miny, VECTOR_OR_0 maxy, VECTOR_OR_0 minz, \
                VECTOR_OR_0 maxz
        IGNORE: RR, RC, RNamespace

igraph_layout_graphopt:
        PARAMS: GRAPH graph, OUT MATRIX res, INTEGER niter=500, \
                REAL node_charge=0.001, REAL node_mass=30, \
                INTEGER spring_length=0, REAL spring_constant=1, \
                REAL max_sa_movement=5, NULL use_seed
        NAME-R: layout.graphopt
        FLAGS: PROGRESS
        IGNORE: RR, RC

igraph_layout_drl:
        PARAMS: GRAPH graph, INOUT MATRIX res, BOOLEAN use_seed=False, \
                DRL_OPTIONS options=igraph.drl.default, VECTOR_OR_0 weights=NULL, \
                VECTOR_BOOL_OR_0 fixed=NULL
        DEFAULT-R: options=igraph.drl.default
        NAME-R: layout.drl
        IGNORE: RR

igraph_layout_drl_3d:
        PARAMS: GRAPH graph, INOUT MATRIX res, BOOLEAN use_seed=False, \
                DRL_OPTIONS options=igraph.drl.default, VECTOR_OR_0 weights=NULL, \
                VECTOR_BOOL_OR_0 fixed=NULL
        DEFAULT-R: options=igraph.drl.default
        NAME-R: layout.drl
        IGNORE: RR

igraph_layout_merge_dla:
        PARAMS: GRAPHLIST graphs, MATRIXLIST coords, OUT MATRIX res
        IGNORE: RR, RC, RNamespace

igraph_layout_sugiyama:
        PARAMS: GRAPH graph, OUT MATRIX res, OUT GRAPH_OR_0 extd_graph, \
                OUT VECTORM1_OR_0 extd_to_orig_eids, \
                VECTORM1_OR_0 layers=NULL, \
                REAL hgap=1, REAL vgap=1, INTEGER maxiter=100, \
                EDGEWEIGHTS weights=NULL
        DEPS: weights ON graph
        NAME-R: layout.sugiyama
        IGNORE: RR

igraph_layout_mds:
        PARAMS: GRAPH graph, OUT MATRIX res, MATRIX_OR_0 dist=NULL, \
                INTEGER dim=2, NULL options
        IGNORE: RR
        NAME-R: layout.mds

igraph_layout_bipartite:
        PARAMS: GRAPH graph, BIPARTITE_TYPES types=NULL, OUT MATRIX res, \
                REAL hgap=1, REAL vgap=1, INTEGER maxiter=100
        DEPS: types ON graph
        NAME-R: layout.bipartite

#######################################
# Cocitation and other similarity measures
#######################################

igraph_cocitation:
        PARAMS: GRAPH graph, OUT MATRIX res, VERTEXSET vids=ALL
        IGNORE: RR, RC, RNamespace

igraph_bibcoupling:
        PARAMS: GRAPH graph, OUT MATRIX res, VERTEXSET vids=ALL
        IGNORE: RR, RC, RNamespace

igraph_similarity_jaccard:
        PARAMS: GRAPH graph, OUT MATRIX res, VERTEXSET vids=ALL, NEIMODE mode=ALL, \
                BOOLEAN loops=False
        DEPS: vids ON graph res, mode ON vids
        NAME-R: similarity.jaccard

igraph_similarity_dice:
        PARAMS: GRAPH graph, OUT MATRIX res, VERTEXSET vids=ALL, NEIMODE mode=ALL, \
                BOOLEAN loops=False
        DEPS: vids ON graph
        NAME-R: similarity.dice

igraph_similarity_inverse_log_weighted:
        PARAMS: GRAPH graph, OUT MATRIX res, VERTEXSET vids=ALL, NEIMODE mode=ALL
        DEPS: vids ON graph
        NAME-R: similarity.invlogweighted

#######################################
# Community structure
#######################################

igraph_compare_communities:
        PARAMS: VECTOR comm1, VECTOR comm2, OUT REALPTR res, \
                COMMCMP method=VI
        IGNORE: RR, RNamespace

igraph_community_spinglass:
        PARAMS: GRAPH graph, VECTOR_OR_0 weights, OUT REALPTR modularity,  \
                OUT REALPTR temperature, OUT VECTOR membership, OUT VECTOR csize, \
                INTEGER spins=25, BOOLEAN parupdate=False, REAL starttemp=1, REAL stoptemp=0.01, \
                REAL coolfact=0.99, SPINCOMMUPDATE update_rule=CONFIG, REAL gamma=1.0, \
                REAL gamma_minus=0, REAL d_p=0, REAL d_n=0
        IGNORE: RR, RC, RNamespace

igraph_community_spinglass_single:
        PARAMS: GRAPH graph, VECTOR_OR_0 weights, INTEGER vertex, OUT VECTOR community, \
                OUT REALPTR cohesion, OUT REALPTR adhesion, \
                OUT INTEGERPTR inner_links, OUT INTEGERPTR outer_links, \
                INTEGER spins=25, SPINCOMMUPDATE update_rule=CONFIG, REAL gamma=1.0
        IGNORE: RR, RC, RNamespace

igraph_community_walktrap:
        PARAMS: GRAPH graph, VECTOR weights, INT steps=4, OUT MATRIX merges, \
                OUT VECTOR modularity, OUT VECTOR membership
        IGNORE: RR, RC, RNamespace

igraph_community_edge_betweenness:
        PARAMS: GRAPH graph, OUT VECTOR result, OUT VECTOR edge_betweenness, \
                OUT MATRIX merges, OUT VECTOR bridges, \
                OUT VECTOR_OR_0 modularity, OUT VECTOR_OR_0 membership, \
                BOOLEAN directed=True, EDGEWEIGHTS weights=NULL
        DEPS: weights ON graph
        IGNORE: RR, RC, RNamespace

igraph_community_eb_get_merges:
        PARAMS: GRAPH graph, VECTOR edges, EDGEWEIGHTS weights=NULL, \
                OUT MATRIX merges, OUT VECTOR bridges, \
                OUT VECTOR_OR_0 modularity, OUT VECTOR_OR_0 membership
        IGNORE: RR, RC, RNamespace

igraph_community_fastgreedy:
        PARAMS: GRAPH graph, VECTOR_OR_0 weights, OUT MATRIX merges, OUT VECTOR modularity, OUT VECTOR_OR_0 membership
        IGNORE: RR, RC, RNamespace

igraph_community_to_membership:
        PARAMS: GRAPH graph, MATRIX merges, INTEGER steps, \
                OUT VECTOR membership, OUT VECTOR csize
        IGNORE: RR, RC, RNamespace

igraph_le_community_to_membership:
        PARAMS: MATRIX merges, INTEGER steps, INOUT VECTOR membership, \
                OUT VECTOR_OR_0 csize
        NAME-R: community.le.to.membership

igraph_modularity:
        PARAMS: GRAPH graph, VECTOR membership, OUT REALPTR modularity, \
                IN VECTOR_OR_0 weights=NULL
        NAME-R: modularity.igraph
        IGNORE: RNamespace, RR

igraph_modularity_matrix:
        PARAMS: GRAPH graph, VECTORM1 membership, OUT MATRIX modmat, \
                EDGEWEIGHTS weights=NULL
        DEPS: weights ON graph
        NAME-R: mod.matrix        

igraph_reindex_membership:
        PARAMS: INOUT VECTOR membership, OUT VECTOR_OR_0 new_to_old
        NAME-R: reindex.membership
        IGNORE: RNamespace

igraph_community_leading_eigenvector:
        PARAMS: GRAPH graph, EDGEWEIGHTS weights=NULL, \
                OUT MATRIX merges, OUT VECTOR membership, \
                INTEGER steps=-1, \
                INOUT ARPACKOPT options=igraph.arpack.default, \
                OUT REALPTR modularity, BOOLEAN start=False, \
                OUT VECTOR_OR_0 eigenvalues, \
                OUT VECTOR_OR_0 eigenvectors, \
                OUT VECTOR_OR_0 history, \
                LEVCFUNC callback, EXTRA callback_extra
        DEFAULT-R: options=igraph.arpack.default
        CLASS-R: igraph.eigenc
        NAME-R: leading.eigenvector.community
        IGNORE: RR, RC

igraph_community_label_propagation:
        PARAMS: GRAPH graph, OUT VECTOR membership, EDGEWEIGHTS weights=NULL, \
                VECTOR_OR_0 initial=NULL, VECTOR_BOOL_OR_0 fixed=NULL, \
                OUT REALPTR modularity
        DEPS: weights ON graph
        NAME-R: label.propagation.community
        IGNORE: RR

igraph_community_multilevel:
        PARAMS: GRAPH graph, EDGEWEIGHTS weights=NULL, \
                OUT VECTOR membership, \
		OUT MATRIX_OR_0 memberships, OUT VECTOR_OR_0 modularity
        DEPS: weights ON graph
        NAME-R: multilevel.community
        IGNORE: RR

igraph_community_optimal_modularity:
        PARAMS: GRAPH graph, OUT REALPTR modularity, \
                OUT VECTOR_OR_0 membership, \
                EDGEWEIGHTS weights=NULL
        NAME-R: optimal.community
        IGNORE: RR

igraph_split_join_distance:
        PARAMS: VECTOR comm1, VECTOR comm2, OUT INTEGERPTR distance12, \
		        OUT INTEGERPTR distance21
        NAME-R: split.join.distance
        IGNORE: RR, RC, RNamespace

igraph_hrg_fit:
        PARAMS: GRAPH graph, INOUT HRG hrg=Default, BOOLEAN start=False, \
                INT steps=0
        NAME-R: hrg.fit
        CLASS-R: igraphHRG
        IGNORE: RR

igraph_hrg_game:
        PARAMS: OUT GRAPH graph, HRG hrg
        NAME-R: hrg.game
        GATTR-R: name IS Hierarchical random graph model

igraph_hrg_dendrogram:
        PARAMS: OUT GRAPH graph, HRG hrg
        NAME-R: hrg.dendrogram

igraph_hrg_consensus:
        PARAMS: GRAPH graph, OUT VECTOR parents, OUT VECTOR weights, \
                INOUT HRG hrg=Default, BOOLEAN start=False, \
                INT num_samples=10000
        NAME-R: hrg.consensus

igraph_hrg_predict:
        PARAMS: GRAPH graph, OUT VERTEXSET edges, OUT VECTOR prob, \
                INOUT HRG hrg=Default, BOOLEAN start=False, \
                INT num_samples=10000, INT num_bins=25
        NAME-R: hrg.predict
        IGNORE: RR

igraph_hrg_create:
        PARAMS: OUT HRG hrg, GRAPH graph, VECTOR prob
        NAME-R: hrg.create
        DEPS: prob ON graph
        CLASS-R: igraphHRG

igraph_community_infomap:
        PARAMS: GRAPH graph, EDGEWEIGHTS e_weights=NULL, \
                VERTEXWEIGHTS v_weights=NULL, INT nb_trials=10, \
                OUT VECTOR membership, OUT REALPTR codelength
        NAME-R: infomap.community
        DEPS: e_weights ON graph, v_weights ON graph
        IGNORE: RR

igraph_graphlets:
        PARAMS: GRAPH graph, EDGEWEIGHTS weights=NULL, \
                OUT VERTEXSETLIST cliques, OUT VECTOR Mu, INT niter=1000
        NAME-R: graphlets
        DEPS: weights ON graph
        IGNORE: RC

igraph_graphlets_candidate_basis:
        PARAMS: GRAPH graph, EDGEWEIGHTS weights=NULL, \
                OUT VERTEXSETLIST cliques, OUT VECTOR thresholds
        NAME-R: graphlets.candidate.basis
        DEPS: weights ON graph
        IGNORE: RR, RC

igraph_graphlets_project:
        PARAMS: GRAPH graph, EDGEWEIGHTS weights=NULL, \
                VERTEXSETLIST cliques, INOUT VECTOR Muc, \
                BOOLEAN startMu=False, INT niter=1000
        NAME-R: graphlets.project
        DEPS: weights ON graph
        IGNORE: RR, RC

#######################################
# Conversion
#######################################

igraph_get_adjacency:
        PARAMS: GRAPH graph, OUT MATRIX res, GETADJACENCY type=BOTH, \
                BOOLEAN eids=False
        IGNORE: RR, RC, RNamespace

igraph_get_edgelist:
        PARAMS: GRAPH graph, OUT VECTOR res, BOOLEAN bycol=False
        IGNORE: RR, RC, RNamespace

igraph_to_directed:
        PARAMS: INOUT GRAPH graph, TODIRECTED flags=MUTUAL
        IGNORE: RR, RC, RNamespace

igraph_to_undirected:
        PARAMS: INOUT GRAPH graph, TOUNDIRECTED mode=COLLAPSE, \
                EDGE_ATTRIBUTE_COMBINATION edge_attr_comb=Default
        NAME-R: as.undirected

igraph_get_stochastic:
        PARAMS: GRAPH graph, OUT MATRIX res, BOOLEAN column_wise=False
        NAME-R: get.stochastic
        IGNORE: RR

igraph_get_stochastic_sparsemat:
        PARAMS: GRAPH graph, OUT SPARSEMATPTR sparsemat, \
                BOOLEAN column_wise=False
        IGNORE: RR, RNamespace

#######################################
# Read and write foreign formats
#######################################

igraph_read_graph_edgelist:
        PARAMS: OUT GRAPH graph, INFILE instream, INTEGER n=0, BOOLEAN directed=True
        IGNORE: RR, RC, RNamespace

igraph_read_graph_ncol:
        PARAMS: OUT GRAPH graph, INFILE instream, STRVECTOR_OR_0 predefnames, \
                BOOLEAN names=True, ADD_WEIGHTS weights=True, BOOLEAN directed=True
        IGNORE: RR, RC, RNamespace

igraph_read_graph_lgl:
        PARAMS: OUT GRAPH graph, INFILE instream, BOOLEAN names=True, \
                ADD_WEIGHTS weights=True, BOOLEAN directed=True
        IGNORE: RR, RC, RNamespace

igraph_read_graph_pajek:
        PARAMS: OUT GRAPH graph, INFILE instream
        IGNORE: RR, RC, RNamespace

igraph_read_graph_graphml:
        PARAMS: OUT GRAPH graph, INFILE instream, INT index=0
        IGNORE: RR, RC, RNamespace

igraph_read_graph_dimacs:
        PARAMS: OUT GRAPH graph, INFILE instream, OUT INTEGERPTR source, \
                OUT INTEGERPTR target, OUT VECTOR capacity, BOOLEAN directed=True
        IGNORE: RR, RC, RNamespace

igraph_read_graph_graphdb:
        PARAMS: OUT GRAPH graph, INFILE instream, BOOLEAN directed=False
        IGNORE: RR, RC, RNamespace

igraph_read_graph_gml:
        PARAMS: OUT GRAPH graph, INFILE instream
        IGNORE: RR, RC, RNamespace

igraph_read_graph_dl:
        PARAMS: OUT GRAPH graph, INFILE instream, BOOLEAN directed=True
        IGNORE: RR, RC, RNamespace

igraph_write_graph_edgelist:
        PARAMS: GRAPH graph, OUTFILE outstream
        IGNORE: RR, RC, RNamespace

igraph_write_graph_ncol:
        PARAMS: GRAPH graph, OUTFILE outstream, CSTRING names="name", CSTRING weights="weight"
        IGNORE: RR, RC, RNamespace

igraph_write_graph_lgl:
        PARAMS: GRAPH graph, OUTFILE outstream, CSTRING names="name", CSTRING weights="weight", \
                BOOLEAN isolates=True
        IGNORE: RR, RC, RNamespace

igraph_write_graph_leda:
        PARAMS: GRAPH graph, OUTFILE outstream, CSTRING names="name", CSTRING weights="weight"
        IGNORE: RR, RC, RNamespace

igraph_write_graph_graphml:
        PARAMS: GRAPH graph, OUTFILE outstream, BOOLEAN prefixattr=True
        IGNORE: RR, RC, RNamespace

igraph_write_graph_pajek:
        PARAMS: GRAPH graph, OUTFILE outstream
        IGNORE: RR, RC, RNamespace

igraph_write_graph_dimacs:
        PARAMS: GRAPH graph, OUTFILE outstream, LONGINT source=0, LONGINT target=0, \
                VECTOR capacity
        IGNORE: RR, RC, RNamespace

igraph_write_graph_gml:
        PARAMS: GRAPH graph, OUTFILE outstream, VECTOR id, CSTRING creator="igraph"
        IGNORE: RR, RC, RNamespace

igraph_write_graph_dot:
        PARAMS: GRAPH graph, OUTFILE outstream
        IGNORE: RR, RC, RNamespace

#######################################
# Motifs
#######################################

igraph_motifs_randesu:
        PARAMS: GRAPH graph, OUT VECTOR hist, INT size=3, VECTOR cut_prob
        IGNORE: RR, RC, RNamespace

igraph_motifs_randesu_estimate:
        PARAMS: GRAPH graph, OUT INTEGERPTR est, INT size=3, VECTOR cut_prob, \
                INTEGER sample_size, VECTOR_OR_0 sample
        IGNORE: RR, RC, RNamespace

igraph_motifs_randesu_no:
        PARAMS: GRAPH graph, OUT INTEGERPTR no, INT size=3, VECTOR cut_prob
        IGNORE: RR, RC, RNamespace

igraph_dyad_census:
        PARAMS: GRAPH graph, OUT INTEGERPTR mut, OUT INTEGERPTR asym, OUT INTEGERPTR null
        NAME-R: dyad.census
        RETURN: ERROR

igraph_triad_census:
        PARAMS: GRAPH graph, OUT VECTOR res
        NAME-R: triad.census
        RETURN: ERROR

igraph_adjacent_triangles:
        PARAMS: GRAPH graph, OUT VECTOR res, VERTEXSET vids=ALL
        DEPS: vids ON graph
        NAME-R: adjacent.triangles

#######################################
# Graph operators
#######################################

igraph_disjoint_union:
        PARAMS: OUT GRAPH res, GRAPH left, GRAPH right, \
                OUT EDGESET edge_map_left, OUT EDGESET edge_map_right
        DEPS: edge_map_left ON left, edge_map_right ON right      
        IGNORE: RR, RC, RNamespace

igraph_disjoint_union_many:
        PARAMS: OUT GRAPH res, GRAPHLIST graphs, OUT VECTORLIST edgemaps
        IGNORE: RR, RC, RNamespace

igraph_union:
        PARAMS: OUT GRAPH res, GRAPH left, GRAPH right
        IGNORE: RR, RC, RNamespace

igraph_union_many:
        PARAMS: OUT GRAPH res, GRAPHLIST graphs
        IGNORE: RR, RC, RNamespace

igraph_intersection:
        PARAMS: OUT GRAPH res, GRAPH left, GRAPH right
        IGNORE: RR, RC, RNamespace

igraph_intersection_many:
        PARAMS: OUT GRAPH res, GRAPHLIST graphs
        IGNORE: RR, RC, RNamespace

igraph_difference:
        PARAMS: OUT GRAPH res, GRAPH orig, GRAPH sub
        IGNORE: RR, RC, RNamespace

igraph_complementer:
        PARAMS: OUT GRAPH res, GRAPH graph, BOOLEAN loops=False
        IGNORE: RR, RC, RNamespace

igraph_compose:
        PARAMS: OUT GRAPH res, GRAPH g1, GRAPH g2
        IGNORE: RR, RC, RNamespace

#######################################
# Maximum flows, minimum cuts
#######################################

igraph_maxflow:
        PARAMS: GRAPH graph, OUT REALPTR value, OUT VECTOR_OR_0 flow, \
                OUT VECTORM1_OR_0 cut, OUT VECTORM1_OR_0 partition1, \
                OUT VECTORM1_OR_0 partition2, VERTEX source, VERTEX target, \
                EDGECAPACITY capacity=NULL, OUT MAXFLOW_STATS stats
        DEPS: capacity ON graph, source ON graph, target ON graph

igraph_maxflow_value:
        PARAMS: GRAPH graph, OUT REALPTR value, VERTEX source, VERTEX target, \
                VECTOR_OR_0 capacity, OUT MAXFLOW_STATS stats
        DEPS: source ON graph, target ON graph
        IGNORE: RR, RC, RNamespace

igraph_mincut_value:
        PARAMS: GRAPH graph, OUT REALPTR res, VECTOR_OR_0 capacity
        IGNORE: RR, RC, RNamespace

igraph_st_mincut_value:
        PARAMS: GRAPH graph, OUT REALPTR res, VERTEX source, VERTEX target, \
                VECTOR_OR_0 capacity
        DEPS: source ON graph, target ON graph
        IGNORE: RR, RC, RNamespace

igraph_mincut:
        PARAMS: GRAPH graph, OUT REALPTR value, OUT VECTORM1 partition1, \
                OUT VECTORM1 partition2, OUT VECTORM1 cut, VECTOR_OR_0 capacity
        IGNORE: RR, RC, RNamespace

igraph_st_vertex_connectivity:
        PARAMS: GRAPH graph, OUT INTEGERPTR res, VERTEX source, VERTEX target, \
                VCONNNEI neighbors=NUMBER_OF_NODES
        DEPS: source ON graph, target ON graph
        IGNORE: RR, RC, RNamespace

igraph_vertex_connectivity:
        PARAMS: GRAPH graph, OUT INTEGERPTR res, BOOLEAN checks=True
        IGNORE: RR, RC, RNamespace

igraph_st_edge_connectivity:
        PARAMS: GRAPH graph, OUT INTEGERPTR res, VERTEX source, VERTEX target
        DEPS: source ON graph, target ON graph
        IGNORE: RR, RC, RNamespace

igraph_edge_connectivity:
        PARAMS: GRAPH graph, OUT INTEGERPTR res, BOOLEAN checks=True
        IGNORE: RR, RC, RNamespace

igraph_edge_disjoint_paths:
        PARAMS: GRAPH graph, OUT INTEGERPTR res, VERTEX source, VERTEX target
        DEPS: source ON graph, target ON graph
        IGNORE: RR, RC, RNamespace

igraph_vertex_disjoint_paths:
        PARAMS: GRAPH graph, OUT INTEGERPTR res, VERTEX source, VERTEX target
        DEPS: source ON graph, target ON graph
        IGNORE: RR, RC, RNamespace

igraph_adhesion:
        PARAMS: GRAPH graph, OUT INTEGERPTR res, BOOLEAN checks=True
        IGNORE: RR, RC, RNamespace

igraph_cohesion:
        PARAMS: GRAPH graph, OUT INTEGERPTR res, BOOLEAN checks=True
        IGNORE: RR, RC, RNamespace

#######################################
# Listing s-t cuts, separators
#######################################

igraph_dominator_tree: 
        PARAMS: GRAPH graph, VERTEX root, OUT VERTEXSET dom, \
                OUT GRAPH_OR_0 domtree, OUT VERTEXSET leftout, \
                INOUTMODE mode=OUT
        DEPS: root ON graph
        NAME-R: dominator.tree

igraph_all_st_cuts:
        PARAMS: GRAPH graph, OUT EDGESETLIST_OR_0 cuts, \
                OUT VERTEXSETLIST_OR_0 partition1s, \
                VERTEX source, VERTEX target
        DEPS: source ON graph, target ON graph, cuts ON graph, \
              partition1s ON graph
        NAME-R: stCuts

igraph_all_st_mincuts:
        PARAMS: GRAPH graph, OUT REALPTR value, \
                OUT EDGESETLIST_OR_0 cuts, \
                OUT VERTEXSETLIST_OR_0 partition1s, \
                VERTEX source, VERTEX target, EDGEWEIGHTS capacity=NULL
        DEPS: capacity ON graph, source ON graph, target ON graph, \
              cuts ON graph, partition1s ON graph
        NAME-R: stMincuts

igraph_is_separator:
        PARAMS: GRAPH graph, VERTEXSET candidate, OUT BOOLEANPTR res
        DEPS: candidate ON graph
        NAME-R: is.separator

igraph_is_minimal_separator:
        PARAMS: GRAPH graph, VERTEXSET candidate, OUT BOOLEANPTR res
        DEPS: candidate ON graph
        NAME-R: is.minimal.separator

igraph_all_minimal_st_separators:
        PARAMS: GRAPH graph, OUT VERTEXSETLIST separators
        DEPS: separators ON graph
        NAME-R: minimal.st.separators

igraph_minimum_size_separators:
        PARAMS: GRAPH graph, OUT VERTEXSETLIST separators
        DEPS: separators ON graph
        NAME-R: minimum.size.separators

igraph_cohesive_blocks:
        PARAMS: GRAPH graph, OUT VERTEXSETLIST blocks, \
                OUT VECTOR cohesion, OUT VECTORM1 parent, \
                OUT GRAPH blockTree
        DEPS: blocks ON graph
        NAME-R: cohesive.blocks
        CLASS-R: cohesiveBlocks
        IGNORE: RR, RC

#######################################
# K-Cores
#######################################

igraph_coreness:
        PARAMS: GRAPH graph, OUT VECTOR cores, NEIMODE mode=ALL
        IGNORE: RR, RC, RNamespace

#######################################
# Graph isomorphism
#######################################

igraph_isoclass:
        PARAMS: GRAPH graph, OUT INTEGERPTR isoclass

igraph_isomorphic:
        PARAMS: GRAPH graph1, GRAPH graph2, OUT BOOLEANPTR iso

igraph_isoclass_subgraph:
        PARAMS: GRAPH graph, VECTOR vids, OUT INTEGERPTR isoclass
        DEPS: vids ON graph
        IGNORE: RR

igraph_isoclass_create:
        PARAMS: OUT GRAPH graph, INTEGER size, INTEGER number, BOOLEAN directed=True
        NAME-R: graph.isocreate

igraph_isomorphic_vf2:
        PARAMS: GRAPH graph1, GRAPH graph2, \
                VERTEX_COLOR vertex_color1, VERTEX_COLOR vertex_color2, \
                EDGE_COLOR edge_color1, EDGE_COLOR edge_color2, \
                OUT BOOLEANPTR iso, \
                OUT VECTORM1_OR_0 map12, OUT VECTORM1_OR_0 map21, \
                NULL node_compat_fn, NULL edge_compat_fn, \
                NULL extra
        DEPS: vertex_color1 ON graph1, vertex_color2 ON graph2, \
              edge_color1 ON graph1, edge_color2 ON graph2

igraph_count_isomorphisms_vf2:
        PARAMS: GRAPH graph1, GRAPH graph2, \
                VERTEX_COLOR vertex_color1, VERTEX_COLOR vertex_color2, \
                EDGE_COLOR edge_color1, EDGE_COLOR edge_color2, \
                OUT INTEGERPTR count, NULL node_compat_fn, \
                NULL edge_compat_fn, NULL extra
        DEPS: vertex_color1 ON graph1, vertex_color2 ON graph2, \
              edge_color1 ON graph1, edge_color2 ON graph2

igraph_get_isomorphisms_vf2:
        PARAMS: GRAPH graph1, GRAPH graph2, \
                VERTEX_COLOR vertex_color1, VERTEX_COLOR vertex_color2, \
                EDGE_COLOR edge_color1, EDGE_COLOR edge_color2, \
                OUT VECTORLIST maps, NULL node_compat_fn, \
                NULL edge_compat_fn, NULL extra
        DEPS: vertex_color1 ON graph1, vertex_color2 ON graph2, \
              edge_color1 ON graph1, edge_color2 ON graph2
        IGNORE: RR

igraph_subisomorphic_vf2:
        PARAMS: GRAPH graph1, GRAPH graph2, \
                VERTEX_COLOR vertex_color1, VERTEX_COLOR vertex_color2, \
                EDGE_COLOR edge_color1, EDGE_COLOR edge_color2, \
                OUT BOOLEANPTR iso, \
                OUT VECTORM1_OR_0 map12, OUT VECTORM1_OR_0 map21, \
                NULL node_compat_fn, NULL edge_compat_fn, \
                NULL extra
        DEPS: vertex_color1 ON graph1, vertex_color2 ON graph2, \
              edge_color1 ON graph1, edge_color2 ON graph2

igraph_count_subisomorphisms_vf2:
        PARAMS: GRAPH graph1, GRAPH graph2, \
                VERTEX_COLOR vertex_color1, VERTEX_COLOR vertex_color2, \
                EDGE_COLOR edge_color1, EDGE_COLOR edge_color2, \
                OUT INTEGERPTR count, NULL node_compat_fn, \
                NULL edge_compat_fn, NULL extra
        DEPS: vertex_color1 ON graph1, vertex_color2 ON graph2, \
              edge_color1 ON graph1, edge_color2 ON graph2

igraph_get_subisomorphisms_vf2:
        PARAMS: GRAPH graph1, GRAPH graph2, \
                VERTEX_COLOR vertex_color1, VERTEX_COLOR vertex_color2, \
                EDGE_COLOR edge_color1, EDGE_COLOR edge_color2, \
                OUT VECTORLIST maps, NULL node_compat_fn, \
                NULL edge_compat_fn, NULL extra
        DEPS: vertex_color1 ON graph1, vertex_color2 ON graph2, \
              edge_color1 ON graph1, edge_color2 ON graph2
        IGNORE: RR

igraph_isomorphic_34:
        PARAMS: GRAPH graph1, GRAPH graph2, OUT BOOLEANPTR iso

igraph_canonical_permutation:
        PARAMS: GRAPH graph, OUT VECTORM1 labeling, BLISSSH sh="fm", OUT BLISSINFO info
        NAME-R: canonical.permutation

igraph_permute_vertices:
        PARAMS: GRAPH graph, OUT GRAPH res, VECTORM1 permutation
        NAME-R: permute.vertices

igraph_isomorphic_bliss:
        PARAMS: GRAPH graph1, GRAPH graph2, OUT BOOLEANPTR iso, \
                OUT VECTORM1_OR_0 map12, OUT VECTORM1_OR_0 map21, \
                BLISSSH sh1="fm", BLISSSH sh2="fm", OUT BLISSINFO info1, \
                OUT BLISSINFO info2

igraph_automorphisms:
        PARAMS: GRAPH graph, BLISSSH sh="fm", OUT BLISSINFO info

igraph_subisomorphic_lad:
        PARAMS: GRAPH pattern, GRAPH target, VERTEXSETLIST_OR_0 domains, \
                OUT BOOLEANPTR_OR_0 iso, OUT VECTOR_OR_0 map, \
                OUT VECTORLIST_OR_0 maps, BOOLEAN induced, INT time_limit
        IGNORE: RR, RC

#######################################
# SCG
#######################################

igraph_scg_grouping:
        PARAMS: MATRIX V, OUT VECTORM1 groups, INTEGER nt, \
                VECTOR_OR_0 nt_vec, SCGMAT mtype=Default, \
                SCGALGO algo=Default, VECTOR_OR_0 p=NULL, \
		INTEGER maxiter=100
        NAME-R: scgGrouping
        IGNORE: RR

igraph_scg_semiprojectors:
        PARAMS: VECTORM1 groups, SCGMAT mtype=Default, \
                OUT MATRIX_OR_0 L, OUT MATRIX_OR_0 R, \
                OUT SPARSEMATPTR_OR_0 Lsparse, OUT SPARSEMATPTR_OR_0 Rsparse, \
                VECTOR_OR_0 p=NULL, SCGNORM norm=Default
        NAME-R: scgSemiProjectors
        IGNORE: RR, RC

igraph_scg_norm_eps:
        PARAMS: MATRIX V, VECTORM1 groups, OUT VECTOR eps, \
                SCGMAT mtype=Default, VECTOR_OR_0 p=NULL, \
                SCGNORM norm=Default
        NAME-R: scgNormEps

igraph_scg_adjacency:
        PARAMS: GRAPH_OR_0 graph, MATRIX_OR_0 matrix, \
                SPARSEMAT_OR_0 sparsemat, VECTOR ev, \
                INTEGER nt, VECTOR_OR_0 ntvec, \
                SCGALGO algo, INOUT VECTOR_OR_0 values, \
                INOUT MATRIX_OR_0 vectors, INOUT VECTORM1_OR_0 groups, \
                BOOLEAN use_arpack=False, INTEGER maxiter, \
                OUT GRAPH_OR_0 scg_graph, OUT MATRIX_OR_0 scg_matrix, \
                OUT SPARSEMAT_OR_0 scg_sparsemat, OUT MATRIX_OR_0 L, \
                OUT MATRIX_OR_0 R, OUT SPARSEMATPTR_OR_0 Lsparse, \
                OUT SPARSEMATPTR_OR_0 Rsparse
        IGNORE: RR, RC, RNamespace

igraph_scg_stochastic:
        PARAMS: GRAPH_OR_0 graph, MATRIX_OR_0 matrix, \
                SPARSEMAT_OR_0 sparsemat, VECTOR ev, \
                INTEGER nt, VECTOR_OR_0 nt_vec, \
                SCGALGO algo, SCGNORM norm=Default, \
                INOUT CVECTOR_OR_0 values, INOUT CMATRIX_OR_0 vectors, \
                INOUT VECTORM1_OR_0 groups, INOUT VECTOR_OR_0 p, \
                BOOLEAN use_arpack=False, INTEGER maxiter, \
                OUT GRAPH_OR_0 scg_graph, OUT MATRIX_OR_0 scg_matrix, \
                OUT SPARSEMAT_OR_0 scg_sparsemat, OUT MATRIX_OR_0 L, \
                OUT MATRIX_OR_0 R, OUT SPARSEMATPTR_OR_0 Lsparse, \
                OUT SPARSEMATPTR_OR_0 Rsparse
        IGNORE: RR, RC, RNamespace

igraph_scg_laplacian:
        PARAMS: GRAPH_OR_0 graph, MATRIX_OR_0 matrix, \
                SPARSEMAT_OR_0 sparsemat, VECTOR ev, \
                INTEGER nt, VECTOR_OR_0 nt_vec, \
                SCGALGO algo, SCGNORM norm=Default, \
                SCGDIR direction=Default, INOUT CVECTOR_OR_0 values, \
                INOUT CMATRIX_OR_0 vectors, INOUT VECTORM1_OR_0 groups, \
                BOOLEAN use_arpack=False, INTEGER maxiter, \
                OUT GRAPH_OR_0 scg_graph, OUT MATRIX_OR_0 scg_matrix, \
                OUT SPARSEMAT_OR_0 scg_sparsemat, OUT MATRIX_OR_0 L, \
                OUT MATRIX_OR_0 R, OUT SPARSEMATPTR_OR_0 Lsparse, \
                OUT SPARSEMATPTR_OR_0 Rsparse
        IGNORE: RR, RC, RNamespace


#######################################
# Matching
#######################################

igraph_is_matching:
       PARAMS: GRAPH graph, BIPARTITE_TYPES_OR_0 types=NULL, \
               VECTOR_LONG_M1 matching, OUT BOOLEANPTR res
       DEPS: types ON graph, matching ON graph
       NAME-R: is.matching
       IGNORE: RR

igraph_is_maximal_matching:
       PARAMS: GRAPH graph, BIPARTITE_TYPES_OR_0 types=NULL, \
               VECTOR_LONG_M1 matching, OUT BOOLEANPTR res
       DEPS: types ON graph
       NAME-R: is.maximal.matching
       IGNORE: RR

igraph_maximum_bipartite_matching:
       PARAMS: GRAPH graph, BIPARTITE_TYPES_OR_0 types=NULL, \
               OUT INTEGERPTR_OR_0 matching_size, \
               OUT REALPTR_OR_0 matching_weight, \
               OUT VECTOR_LONG_M1 matching, \
               EDGEWEIGHTS weights=NULL, REAL eps=.Machine$double.eps
       DEPS: types ON graph, weights ON graph
       NAME-R: maximum.bipartite.matching
       IGNORE: RR

#######################################
# Eigensolvers
#######################################

igraph_eigen_adjacency:
       PARAMS: GRAPH graph, EIGENALGO algorithm=ARPACK, \
               EIGENWHICH which=Default, \
               INOUT ARPACKOPT options=igraph.arpack.default, \
               NULL storage, OUT VECTOR values, OUT MATRIX vectors, \
               NULL cmplxvalues, NULL cmplxvectors
       NAME-R: graph.eigen

#######################################
# Fitting power laws
#######################################

igraph_power_law_fit:
       PARAMS: VECTOR data, OUT PLFIT res, REAL xmin=-1, \
               BOOLEAN force_continuous=False
       NAME-R: power.law.fit.new
       IGNORE: RNamespace

#######################################
# Dynamics, on networks
#######################################

igraph_sir:
       PARAMS: GRAPH graph, REAL beta, REAL gamma, INTEGER no_sim=100, \
               OUT SIRLIST res
       NAME-R: sir
       CLASS-R: sir

#######################################
# Other, not graph related
#######################################

igraph_running_mean:
        PARAMS: VECTOR data, OUT VECTOR res, INTEGER binwidth
        IGNORE: RR, RC, RNamespace

igraph_random_sample:
        PARAMS: OUT VECTOR res, INTEGER l, INTEGER h, INTEGER length
        IGNORE: RR, RC, RNamespace

igraph_convex_hull:
        PARAMS: MATRIX data, OUT VECTOR resverts, OUT MATRIX rescoords
        NAME-R: convex.hull

#######################################
# (R)evolver
#######################################

igraph_revolver_ml_d:
        PARAMS: GRAPH graph, INTEGER niter, OUT VECTOR kernel, \
                OUT VECTOR_OR_0 cites, REAL delta=1e-10, VECTOR_OR_0 filter=NULL, \
                OUT REALPTR logprob, OUT REALPTR logmax
        NAME-R: revolver.ml.d
        FLAGS: PROGRESS

igraph_revolver_probs_d:
        PARAMS: GRAPH graph, VECTOR kernel, OUT VECTOR_OR_0 probs, \
                OUT VECTOR_OR_0 citedprobs, OUT VECTOR_OR_0 citingprobs, \
                BOOLEAN ntk=False
        NAME-R: revolver.probs.d

igraph_revolver_ml_de:
        PARAMS: GRAPH graph, INTEGER niter, OUT MATRIX kernel, \
                VECTOR cats, OUT MATRIX_OR_0 cites, REAL delta=1e-10, \
                VECTOR_OR_0 filter=NULL, \
                OUT REALPTR logprob, OUT REALPTR logmax
        NAME-R: revolver.ml.de
        FLAGS: PROGRESS

igraph_revolver_probs_de:
        PARAMS: GRAPH graph, MATRIX kernel, VECTOR cats, OUT VECTOR_OR_0 logprobs, \
                OUT VECTOR_OR_0 logcited, OUT VECTOR_OR_0 logciting
        NAME-R: revolver.probs.de

igraph_revolver_ml_ade:
        PARAMS: GRAPH graph, INTEGER niter, OUT ARRAY3 kernel, \
                VECTOR cats, OUT ARRAY3_OR_0 cites, INTEGER agebins=300, \
                REAL delta=1e-10, VECTOR_OR_0 filter=NULL, \
                OUT REALPTR logprob, OUT REALPTR logmax
        NAME-R: revolver.ml.ade
        FLAGS: PROGRESS

igraph_revolver_probs_ade:
        PARAMS: GRAPH graph, ARRAY3 kernel, VECTOR cats, OUT VECTOR_OR_0 logprobs, \
                OUT VECTOR_OR_0 logcited, OUT VECTOR_OR_0 logciting
        NAME-R: revolver.probs.ade

igraph_revolver_ml_f:
        PARAMS: GRAPH graph, INTEGER niter, OUT VECTOR kernel, \
                OUT VECTOR_OR_0 cites, REAL delta=1e-10, OUT REALPTR logprob, \
                OUT REALPTR logmax
        NAME-R: revolver.ml.f
        FLAGS: PROGRESS

igraph_revolver_ml_df:
        PARAMS: GRAPH graph, INTEGER niter, OUT MATRIX kernel, \
                OUT MATRIX_OR_0 cites, REAL delta=1e-10, OUT REALPTR logprob, \
                OUT REALPTR logmax
        NAME-R: revolver.ml.df
        FLAGS: PROGRESS

igraph_revolver_ml_l:
        PARAMS: GRAPH graph, INTEGER niter, OUT VECTOR kernel, \
                OUT VECTOR_OR_0 cites, INTEGER agebins=300, REAL delta=1e-10, \
                OUT REALPTR logprob, OUT REALPTR logmax
        NAME-R: revolver.ml.l

igraph_revolver_ml_ad:
        PARAMS: GRAPH graph, INTEGER niter, OUT MATRIX kernel, \
                OUT MATRIX_OR_0 cites, INTEGER agebins=300, \
                REAL delta=1e-10, VECTOR_OR_0 filter=NULL, \
                OUT REALPTR logprob, OUT REALPTR logmax
        NAME-R: revolver.ml.ad
        FLAGS: PROGRESS

igraph_revolver_probs_ad:
        PARAMS: GRAPH graph, MATRIX kernel, OUT VECTOR_OR_0 probs, \
                OUT VECTOR_OR_0 citedprobs, OUT VECTOR_OR_0 citingprobs, \
                BOOLEAN ntk=False
        NAME-R: revolver.probs.ad

igraph_revolver_ml_D_alpha:
        PARAMS: GRAPH graph, INOUT REALPTR alpha, OUT REALPTR Fmin, \
                REAL abstol=1e-8, REAL reltol=1e-8, INT maxit=1000, \
                VECTOR_OR_0 filter=NULL, \
                OUT INTEGERPTR fncount, OUT INTEGERPTR grcount
        NAME-R: revolver.ml.D.alpha
        FLAGS: PROGRESS

igraph_revolver_ml_D_alpha_a:
        PARAMS: GRAPH graph, INOUT REALPTR alpha, INOUT REALPTR a, \
                OUT REALPTR Fmin, REAL abstol=1e-8, REAL reltol=1e-8, \
                INT maxit=1000, VECTOR_OR_0 filter=NULL, \
                OUT INTEGERPTR fncount, OUT INTEGERPTR grcount
        NAME-R: revolver.ml.D.alpha.a
        FLAGS: PROGRESS

igraph_revolver_ml_DE_alpha_a:
        PARAMS: GRAPH graph, VECTOR cats, INOUT REALPTR alpha, \
                INOUT REALPTR a, INOUT VECTOR coeffs, OUT REALPTR Fmin, \
                REAL abstol=1e-8, REAL reltol=1e-8, INT maxit=1000, \
                VECTOR_OR_0 filter=NULL, \
                OUT INTEGERPTR fncount, OUT INTEGERPTR grcount
        NAME-R: revolver.ml.DE.alpha.a

igraph_revolver_ml_AD_alpha_a_beta:
        PARAMS: GRAPH graph, INOUT REALPTR alpha, INOUT REALPTR a, \
                INOUT REALPTR beta, OUT REALPTR Fmin, \
                REAL abstol=1e-8, REAL reltol=1e-8, INT maxit=1000, INT agebins=300,\
                VECTOR_OR_0 filter=NULL, \
                OUT INTEGERPTR fncount, OUT INTEGERPTR grcount
        NAME-R: revolver.ml.AD.alpha.a.beta
        FLAGS: PROGRESS

igraph_revolver_ml_AD_dpareto:
        PARAMS: GRAPH graph, INOUT REALPTR alpha, INOUT REALPTR a, \
                INOUT REALPTR paralpha, INOUT REALPTR parbeta, \
                INOUT REALPTR parscale, OUT REALPTR Fmin, \
                REAL abstol=1e-8, REAL reltol=1e-8, INT maxit=1000, INT agebins=300,\
                VECTOR_OR_0 filter=NULL, \
                OUT INTEGERPTR fncount, OUT INTEGERPTR grcount
        NAME-R: revolver.ml.AD.dpareto
        FLAGS: PROGRESS

igraph_revolver_ml_AD_dpareto_eval:
        PARAMS: GRAPH graph, REAL alpha, REAL a, REAL paralpha, REAL parbeta, \
                REAL parscale, OUT REALPTR value, OUT VECTOR deriv, \
                INT agebins=300, VECTOR_OR_0 filter=NULL
        NAME-R: revolver.ml.AD.dpareto.eval

igraph_revolver_ml_ADE_alpha_a_beta:
        PARAMS: GRAPH graph, VECTOR cats, INOUT REALPTR alpha, \
                INOUT REALPTR a, INOUT REALPTR beta, INOUT VECTOR coeffs, \
                OUT REALPTR Fmin, REAL abstol=1e-8, REAL reltol=1e-8, \
                INT maxit=1000, INT agebins=300, \
                VECTOR_OR_0 filter=NULL, \
                OUT INTEGERPTR fncount, OUT INTEGERPTR grcount
        NAME-R: revolver.ml.ADE.alpha.a.beta

igraph_revolver_ml_ADE_dpareto:
        PARAMS: GRAPH graph, VECTOR cats, INOUT REALPTR alpha, \
                INOUT REALPTR a, INOUT REALPTR paralpha, \
                INOUT REALPTR parbeta, INOUT REALPTR parscale, \
                INOUT VECTOR coeffs, OUT REALPTR Fmin, \
                REAL abstol=1e-8, REAL reltol=1e-8, INT maxit=1000, \
                INT agebins=300, VECTOR_OR_0 filter=NULL, \
                OUT INTEGERPTR fncount, OUT INTEGERPTR grcount
        NAME-R: revolver.ml.ADE.dpareto

igraph_revolver_ml_ADE_dpareto_eval:
        PARAMS: GRAPH graph, VECTOR cats, REAL alpha, REAL a, REAL paralpha, \
                REAL parbeta, REAL parscale, VECTOR coeffs, \
                OUT REALPTR value, OUT VECTOR deriv, INT agebins=300, \
                VECTOR_OR_0 filter=NULL
        NAME-R: revolver.ml.ADE.dpareto.eval

igraph_revolver_ml_ADE_dpareto_evalf:
        PARAMS: GRAPH graph, VECTOR cats, MATRIX par, OUT VECTOR value, \
                INT agebins, VECTOR_OR_0 filter=NULL
        NAME-R: revolver.ml.ADE.dpareto.evalf

igraph_revolver_probs_ADE_dpareto:
        PARAMS: GRAPH graph, MATRIX par, VECTOR cats, VECTOR gcats, \
                INT agebins, OUT VECTOR_OR_0 logprobs, \
                OUT VECTOR_OR_0 logcited, OUT VECTOR_OR_0 logciting
        NAME-R: revolver.probs.ADE.dpareto

#######################################
# Other, (yet) undocumented functions
#######################################
igraph_convergence_degree:
        PARAMS: GRAPH graph, OUT VECTOR result, OUT VECTOR in, OUT VECTOR out
        IGNORE: RR, RC, RNamespace
