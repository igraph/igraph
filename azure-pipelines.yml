pool:
  vmImage: 'ubuntu-latest'

variables:
  CMAKE_COLOR_DIAGNOSTICS: ON
  CMAKE_GENERATOR: Ninja
  CCACHE_DIR: $(Pipeline.Workspace)/ccache
  CCACHE_MAXSIZE: 256M
  ASAN_OPTIONS: detect_stack_use_after_return=1:color=always
  UBSAN_OPTIONS: print_stacktrace=1:color=always
  OMP_NUM_THREADS: 1
  CTEST_PARALLEL_LEVEL: 0 # Since CMake 3.29, a setting of 0 will try to use all available resources

jobs:
  # In this test we install and generate locales so that igraph_enter/exit_safelocale() can be tested
  - job: linux_static_vendored
    steps:
      - script: |
          sudo apt-get update
          sudo apt-get install ninja-build ccache language-pack-de -y
        displayName: Install dependencies

      - script: |
          sudo locale-gen de_DE
          sudo update-locale
        displayName: Generate locales

      - template: .azure/build.yml
        parameters:
          build_type: Debug
          extra_cmake_args: '-DUSE_SANITIZER=Address\;Undefined -DCMAKE_C_FLAGS="-Og -fno-sanitize-recover=undefined -fno-sanitize=float-divide-by-zero" -DCMAKE_CXX_FLAGS="-Og -fno-sanitize-recover=undefined -fno-sanitize=float-divide-by-zero"'

  - job: linux_static_vendored_32
    steps:
      - script: sudo apt-get install ninja-build ccache -y
        displayName: Install dependencies

      - template: .azure/build.yml
        parameters:
          build_type: Debug
          extra_cmake_args: '-DUSE_SANITIZER=Address\;Undefined -DCMAKE_C_FLAGS="-Og -fno-sanitize-recover=undefined -fno-sanitize=float-divide-by-zero" -DCMAKE_CXX_FLAGS="-Og -fno-sanitize-recover=undefined -fno-sanitize=float-divide-by-zero" -DIGRAPH_INTEGER_SIZE=32'

  - job: linux_static_external
    steps:
      - script: sudo apt-get install ninja-build ccache libgmp-dev libglpk-dev libarpack2-dev libopenblas-dev -y
        displayName: Install dependencies

      - template: .azure/build.yml
        parameters:
          int_blas: false
          int_lapack: false
          int_arpack: false
          int_gmp: false
          int_glpk: false
          extra_cmake_args: '-DBLA_VENDOR=OpenBLAS'

  - job: linux_shared_vendored
    steps:
      - script: sudo apt-get install ninja-build ccache -y
        displayName: Install dependencies

      - template: .azure/build.yml
        parameters:
          build_shared: true

  - job: linux_shared_external
    steps:
      - script: sudo apt-get install ninja-build ccache libgmp-dev libglpk-dev libarpack2-dev libopenblas-dev -y
        displayName: Install dependencies

      - template: .azure/build.yml
        parameters:
          int_blas: false
          int_lapack: false
          int_arpack: false
          int_gmp: false
          int_glpk: false
          extra_cmake_args: '-DBLA_VENDOR=OpenBLAS'
          build_shared: true

  - job: linux_clang_20
    steps:
      - script: |
          sudo apt-get install ninja-build ccache -y
          wget https://apt.llvm.org/llvm.sh
          chmod +x llvm.sh
          sudo ./llvm.sh 20
        displayName: Install dependencies

      - template: .azure/build.yml
        parameters:
          build_type: Debug
          extra_cmake_args: '-DUSE_SANITIZER=Address\;Undefined -DCMAKE_C_FLAGS="-Og -fno-sanitize-recover=undefined -fno-sanitize=float-divide-by-zero" -DCMAKE_CXX_FLAGS="-Og -fno-sanitize-recover=undefined -fno-sanitize=float-divide-by-zero" -DCMAKE_C_COMPILER=clang-20  -DCMAKE_CXX_COMPILER=clang++-20'

  - job: linux_x87
    steps:
      - script: sudo apt-get install ninja-build ccache -y
        displayName: Install dependencies

      - template: .azure/build.yml
        parameters:
          extra_cmake_args: '-DCMAKE_C_FLAGS="-mfpmath=387" -DCMAKE_CXX_FLAGS="-mfpmath=387"'

  - job: linux_alpine
    steps:
      # https://github.com/alpinelinux/alpine-chroot-install
      - bash: |
          set -e
          wget https://raw.githubusercontent.com/alpinelinux/alpine-chroot-install/v0.14.0/alpine-chroot-install && echo 'ccbf65f85cdc351851f8ad025bb3e65bae4d5b06  alpine-chroot-install' | sha1sum -c || exit 1
          alpine() { /alpine/enter-chroot -u "$USER" "$@"; }
          sudo sh alpine-chroot-install -p 'build-base linux-headers git cmake ninja bison flex libxml2-dev' -k 'OMP_NUM_THREADS CTEST_.* CMAKE_.*'
          mkdir build && cd build
          alpine cmake .. -DIGRAPH_USE_INTERNAL_BLAS=ON -DIGRAPH_USE_INTERNAL_LAPACK=ON -DIGRAPH_USE_INTERNAL_ARPACK=ON -DIGRAPH_USE_INTERNAL_GLPK=ON -DIGRAPH_USE_INTERNAL_GMP=ON -DIGRAPH_USE_INTERNAL_PLFIT=ON -DIGRAPH_ENABLE_TLS=ON -DIGRAPH_VERIFY_FINALLY_STACK=ON
          alpine cmake --build . --target build_tests
          alpine ctest --output-on-failure

  - job: macos
    pool:
      vmImage: macos-latest
    steps:
      - script: |
          brew install ninja ccache
        displayName: Install dependencies

      - template: .azure/build.yml
        parameters:
          int_blas: false
          int_lapack: false

  - job: windows_static
    pool:
       vmImage: windows-latest

    steps:
      - template: .azure/build-win.yml

  - job: windows_shared
    pool:
       vmImage: windows-latest

    steps:
      - template: .azure/build-win.yml
        parameters:
          build_shared: true
          vsver: '14.4' # latest VS2022
          vcpkg_target_triplet: x64-windows

  - job: documentation
    steps:
      - script: sudo apt-get install ninja-build xmlto texinfo source-highlight libxml2-utils xsltproc fop docbook2x -y
        displayName: Install dependencies

      - task: CMake@1
        displayName: CMake
        inputs:
          cmakeArgs: '..'

      - task: CMake@1
        displayName: Doc build
        inputs:
          cmakeArgs: '--build . --target doc'
