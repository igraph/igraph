<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="358" onload="init(evt)" viewBox="0 0 1200 358" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="358" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="341.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="341.00"> </text><svg id="frames" x="10" width="1180"><g><title>igraph_rng_default [benchmark_igraph_degree_sequence_game] (45 samples, 0.21%)</title><rect x="12.8029%" y="165" width="0.2085%" height="15" fill="rgb(227,0,7)"/><text x="13.0529%" y="175.50"></text></g><g><title>igraph_rng_bits [benchmark_igraph_degree_sequence_game] (78 samples, 0.36%)</title><rect x="19.4755%" y="85" width="0.3614%" height="15" fill="rgb(217,0,24)"/><text x="19.7255%" y="95.50"></text></g><g><title>pcg_output_xsh_rr_64_32 [benchmark_igraph_degree_sequence_game] (179 samples, 0.83%)</title><rect x="20.5505%" y="53" width="0.8294%" height="15" fill="rgb(221,193,54)"/><text x="20.8005%" y="63.50"></text></g><g><title>pcg_rotr_32 [benchmark_igraph_degree_sequence_game] (83 samples, 0.38%)</title><rect x="20.9953%" y="37" width="0.3846%" height="15" fill="rgb(248,212,6)"/><text x="21.2453%" y="47.50"></text></g><g><title>igraph_rng_get_integer [benchmark_igraph_degree_sequence_game] (1,917 samples, 8.88%)</title><rect x="13.0114%" y="165" width="8.8828%" height="15" fill="rgb(208,68,35)"/><text x="13.2614%" y="175.50">igraph_rng_ge..</text></g><g><title>igraph_i_rng_get_uint_bounded [benchmark_igraph_degree_sequence_game] (1,568 samples, 7.27%)</title><rect x="14.6286%" y="149" width="7.2657%" height="15" fill="rgb(232,128,0)"/><text x="14.8786%" y="159.50">igraph_i_r..</text></g><g><title>igraph_i_rng_get_uint32_bounded [benchmark_igraph_degree_sequence_game] (1,455 samples, 6.74%)</title><rect x="15.1522%" y="133" width="6.7420%" height="15" fill="rgb(207,160,47)"/><text x="15.4022%" y="143.50">igraph_i_..</text></g><g><title>igraph_i_rng_get_uint32 [benchmark_igraph_degree_sequence_game] (868 samples, 4.02%)</title><rect x="17.8722%" y="117" width="4.0221%" height="15" fill="rgb(228,23,34)"/><text x="18.1222%" y="127.50">igra..</text></g><g><title>igraph_i_rng_get_random_bits [benchmark_igraph_degree_sequence_game] (799 samples, 3.70%)</title><rect x="18.1919%" y="101" width="3.7023%" height="15" fill="rgb(218,30,26)"/><text x="18.4419%" y="111.50">igra..</text></g><g><title>igraph_rng_pcg32_get [benchmark_igraph_degree_sequence_game] (444 samples, 2.06%)</title><rect x="19.8369%" y="85" width="2.0574%" height="15" fill="rgb(220,122,19)"/><text x="20.0869%" y="95.50">i..</text></g><g><title>pcg_setseq_64_xsh_rr_32_random_r [benchmark_igraph_degree_sequence_game] (345 samples, 1.60%)</title><rect x="20.2956%" y="69" width="1.5986%" height="15" fill="rgb(250,228,42)"/><text x="20.5456%" y="79.50"></text></g><g><title>pcg_setseq_64_step_r [benchmark_igraph_degree_sequence_game] (111 samples, 0.51%)</title><rect x="21.3799%" y="53" width="0.5143%" height="15" fill="rgb(240,193,28)"/><text x="21.6299%" y="63.50"></text></g><g><title>0x0000560D353D47C0 [benchmark_igraph_degree_sequence_game] (28 samples, 0.13%)</title><rect x="23.0202%" y="149" width="0.1297%" height="15" fill="rgb(216,20,37)"/><text x="23.2702%" y="159.50"></text></g><g><title>RB_insert [benchmark_igraph_degree_sequence_game] (360 samples, 1.67%)</title><rect x="23.1500%" y="149" width="1.6681%" height="15" fill="rgb(206,188,39)"/><text x="23.4000%" y="159.50"></text></g><g><title>RB_insert_fixup [benchmark_igraph_degree_sequence_game] (139 samples, 0.64%)</title><rect x="24.1740%" y="133" width="0.6441%" height="15" fill="rgb(217,207,13)"/><text x="24.4240%" y="143.50"></text></g><g><title>0x00007F654AFA2A30 [libc.so.6] (25 samples, 0.12%)</title><rect x="25.9580%" y="133" width="0.1158%" height="15" fill="rgb(231,73,38)"/><text x="26.2080%" y="143.50"></text></g><g><title>0x00007F654AFA2A49 [libc.so.6] (26 samples, 0.12%)</title><rect x="26.0785%" y="133" width="0.1205%" height="15" fill="rgb(225,20,46)"/><text x="26.3285%" y="143.50"></text></g><g><title>0x00007F654AFA2B88 [libc.so.6] (29 samples, 0.13%)</title><rect x="26.2036%" y="133" width="0.1344%" height="15" fill="rgb(210,31,41)"/><text x="26.4536%" y="143.50"></text></g><g><title>0x00007F654AFA2C9C [libc.so.6] (136 samples, 0.63%)</title><rect x="26.3612%" y="133" width="0.6302%" height="15" fill="rgb(221,200,47)"/><text x="26.6112%" y="143.50"></text></g><g><title>0x00007F654AFA2CAB [libc.so.6] (25 samples, 0.12%)</title><rect x="26.9913%" y="133" width="0.1158%" height="15" fill="rgb(226,26,5)"/><text x="27.2413%" y="143.50"></text></g><g><title>0x00007F654AFA2CBA [libc.so.6] (36 samples, 0.17%)</title><rect x="27.1906%" y="133" width="0.1668%" height="15" fill="rgb(249,33,26)"/><text x="27.4406%" y="143.50"></text></g><g><title>0x00007F654AFA2CCD [libc.so.6] (23 samples, 0.11%)</title><rect x="27.4269%" y="133" width="0.1066%" height="15" fill="rgb(235,183,28)"/><text x="27.6769%" y="143.50"></text></g><g><title>0x00007F654AFA2DF4 [libc.so.6] (22 samples, 0.10%)</title><rect x="27.6864%" y="133" width="0.1019%" height="15" fill="rgb(221,5,38)"/><text x="27.9364%" y="143.50"></text></g><g><title>__libc_calloc [libc.so.6] (665 samples, 3.08%)</title><rect x="24.8181%" y="149" width="3.0814%" height="15" fill="rgb(247,18,42)"/><text x="25.0681%" y="159.50">__l..</text></g><g><title>BST_Search [benchmark_igraph_degree_sequence_game] (80 samples, 0.37%)</title><rect x="28.4231%" y="133" width="0.3707%" height="15" fill="rgb(241,131,45)"/><text x="28.6731%" y="143.50"></text></g><g><title>igraph_set_add [benchmark_igraph_degree_sequence_game] (1,490 samples, 6.90%)</title><rect x="21.8943%" y="165" width="6.9042%" height="15" fill="rgb(249,31,29)"/><text x="22.1443%" y="175.50">igraph_se..</text></g><g><title>igraph_set_contains [benchmark_igraph_degree_sequence_game] (194 samples, 0.90%)</title><rect x="27.8995%" y="149" width="0.8989%" height="15" fill="rgb(225,111,53)"/><text x="28.1495%" y="159.50"></text></g><g><title>igraph_set_contains [benchmark_igraph_degree_sequence_game] (869 samples, 4.03%)</title><rect x="28.7985%" y="165" width="4.0267%" height="15" fill="rgb(238,160,17)"/><text x="29.0485%" y="175.50">igra..</text></g><g><title>BST_Search [benchmark_igraph_degree_sequence_game] (358 samples, 1.66%)</title><rect x="31.1663%" y="149" width="1.6589%" height="15" fill="rgb(214,148,48)"/><text x="31.4163%" y="159.50"></text></g><g><title>BST_Search [benchmark_igraph_degree_sequence_game] (75 samples, 0.35%)</title><rect x="32.4776%" y="133" width="0.3475%" height="15" fill="rgb(232,36,49)"/><text x="32.7276%" y="143.50"></text></g><g><title>0x0000560D353D4930 [benchmark_igraph_degree_sequence_game] (28 samples, 0.13%)</title><rect x="49.2887%" y="149" width="0.1297%" height="15" fill="rgb(209,103,24)"/><text x="49.5387%" y="159.50"></text></g><g><title>0x00007F654AFA1720 [libc.so.6] (26 samples, 0.12%)</title><rect x="50.1691%" y="133" width="0.1205%" height="15" fill="rgb(229,88,8)"/><text x="50.4191%" y="143.50"></text></g><g><title>0x00007F654AFA174F [libc.so.6] (25 samples, 0.12%)</title><rect x="50.4008%" y="133" width="0.1158%" height="15" fill="rgb(213,181,19)"/><text x="50.6508%" y="143.50"></text></g><g><title>0x00007F654AFA17BF [libc.so.6] (35 samples, 0.16%)</title><rect x="50.7205%" y="133" width="0.1622%" height="15" fill="rgb(254,191,54)"/><text x="50.9705%" y="143.50"></text></g><g><title>0x00007F654AFA17FD [libc.so.6] (26 samples, 0.12%)</title><rect x="51.1515%" y="133" width="0.1205%" height="15" fill="rgb(241,83,37)"/><text x="51.4015%" y="143.50"></text></g><g><title>igraph_set_destroy [benchmark_igraph_degree_sequence_game] (4,100 samples, 19.00%)</title><rect x="32.8252%" y="165" width="18.9982%" height="15" fill="rgb(233,36,39)"/><text x="33.0752%" y="175.50">igraph_set_destroy [benchmark_..</text></g><g><title>free [libc.so.6] (516 samples, 2.39%)</title><rect x="49.4324%" y="149" width="2.3910%" height="15" fill="rgb(226,3,54)"/><text x="49.6824%" y="159.50">fr..</text></g><g><title>igraph_i_degree_sequence_game_configuration_simple_directed [benchmark_igraph_degree_sequence_game] (11,182 samples, 51.81%)</title><rect x="0.0185%" y="181" width="51.8141%" height="15" fill="rgb(245,192,40)"/><text x="0.2685%" y="191.50">igraph_i_degree_sequence_game_configuration_simple_directed [benchmark_igraph_degree_..</text></g><g><title>igraph_rng_default [benchmark_igraph_degree_sequence_game] (78 samples, 0.36%)</title><rect x="59.7609%" y="165" width="0.3614%" height="15" fill="rgb(238,167,29)"/><text x="60.0109%" y="175.50"></text></g><g><title>igraph_rng_bits [benchmark_igraph_degree_sequence_game] (99 samples, 0.46%)</title><rect x="67.0451%" y="85" width="0.4587%" height="15" fill="rgb(232,182,51)"/><text x="67.2951%" y="95.50"></text></g><g><title>pcg_output_xsh_rr_64_32 [benchmark_igraph_degree_sequence_game] (221 samples, 1.02%)</title><rect x="68.3703%" y="53" width="1.0240%" height="15" fill="rgb(231,60,39)"/><text x="68.6203%" y="63.50"></text></g><g><title>pcg_rotr_32 [benchmark_igraph_degree_sequence_game] (113 samples, 0.52%)</title><rect x="68.8708%" y="37" width="0.5236%" height="15" fill="rgb(208,69,12)"/><text x="69.1208%" y="47.50"></text></g><g><title>igraph_rng_get_integer [benchmark_igraph_degree_sequence_game] (2,130 samples, 9.87%)</title><rect x="60.1223%" y="165" width="9.8698%" height="15" fill="rgb(235,93,37)"/><text x="60.3723%" y="175.50">igraph_rng_get..</text></g><g><title>igraph_i_rng_get_uint_bounded [benchmark_igraph_degree_sequence_game] (1,781 samples, 8.25%)</title><rect x="61.7395%" y="149" width="8.2526%" height="15" fill="rgb(213,116,39)"/><text x="61.9895%" y="159.50">igraph_i_rn..</text></g><g><title>igraph_i_rng_get_uint32_bounded [benchmark_igraph_degree_sequence_game] (1,652 samples, 7.65%)</title><rect x="62.3372%" y="133" width="7.6549%" height="15" fill="rgb(222,207,29)"/><text x="62.5872%" y="143.50">igraph_i_r..</text></g><g><title>igraph_i_rng_get_uint32 [benchmark_igraph_degree_sequence_game] (1,020 samples, 4.73%)</title><rect x="65.2657%" y="117" width="4.7264%" height="15" fill="rgb(206,96,30)"/><text x="65.5157%" y="127.50">igraph..</text></g><g><title>igraph_i_rng_get_random_bits [benchmark_igraph_degree_sequence_game] (932 samples, 4.32%)</title><rect x="65.6735%" y="101" width="4.3186%" height="15" fill="rgb(218,138,4)"/><text x="65.9235%" y="111.50">igrap..</text></g><g><title>igraph_rng_pcg32_get [benchmark_igraph_degree_sequence_game] (537 samples, 2.49%)</title><rect x="67.5038%" y="85" width="2.4883%" height="15" fill="rgb(250,191,14)"/><text x="67.7538%" y="95.50">ig..</text></g><g><title>pcg_setseq_64_xsh_rr_32_random_r [benchmark_igraph_degree_sequence_game] (418 samples, 1.94%)</title><rect x="68.0552%" y="69" width="1.9369%" height="15" fill="rgb(239,60,40)"/><text x="68.3052%" y="79.50">p..</text></g><g><title>pcg_setseq_64_step_r [benchmark_igraph_degree_sequence_game] (129 samples, 0.60%)</title><rect x="69.3944%" y="53" width="0.5977%" height="15" fill="rgb(206,27,48)"/><text x="69.6444%" y="63.50"></text></g><g><title>0x0000560D353D47C0 [benchmark_igraph_degree_sequence_game] (42 samples, 0.19%)</title><rect x="72.1978%" y="149" width="0.1946%" height="15" fill="rgb(225,35,8)"/><text x="72.4478%" y="159.50"></text></g><g><title>LeftRotate [benchmark_igraph_degree_sequence_game] (39 samples, 0.18%)</title><rect x="76.3496%" y="117" width="0.1807%" height="15" fill="rgb(250,213,24)"/><text x="76.5996%" y="127.50"></text></g><g><title>RB_insert [benchmark_igraph_degree_sequence_game] (927 samples, 4.30%)</title><rect x="72.3924%" y="149" width="4.2954%" height="15" fill="rgb(247,123,22)"/><text x="72.6424%" y="159.50">RB_in..</text></g><g><title>RB_insert_fixup [benchmark_igraph_degree_sequence_game] (475 samples, 2.20%)</title><rect x="74.4868%" y="133" width="2.2010%" height="15" fill="rgb(231,138,38)"/><text x="74.7368%" y="143.50">R..</text></g><g><title>RightRotate [benchmark_igraph_degree_sequence_game] (34 samples, 0.16%)</title><rect x="76.5303%" y="117" width="0.1575%" height="15" fill="rgb(231,145,46)"/><text x="76.7803%" y="127.50"></text></g><g><title>0x00007F654AFA2A30 [libc.so.6] (31 samples, 0.14%)</title><rect x="78.4718%" y="133" width="0.1436%" height="15" fill="rgb(251,118,11)"/><text x="78.7218%" y="143.50"></text></g><g><title>0x00007F654AFA2A49 [libc.so.6] (33 samples, 0.15%)</title><rect x="78.6154%" y="133" width="0.1529%" height="15" fill="rgb(217,147,25)"/><text x="78.8654%" y="143.50"></text></g><g><title>0x00007F654AFA2B88 [libc.so.6] (24 samples, 0.11%)</title><rect x="78.7776%" y="133" width="0.1112%" height="15" fill="rgb(247,81,37)"/><text x="79.0276%" y="143.50"></text></g><g><title>0x00007F654AFA2C9C [libc.so.6] (146 samples, 0.68%)</title><rect x="78.9908%" y="133" width="0.6765%" height="15" fill="rgb(209,12,38)"/><text x="79.2408%" y="143.50"></text></g><g><title>0x00007F654AFA2CB6 [libc.so.6] (26 samples, 0.12%)</title><rect x="79.8480%" y="133" width="0.1205%" height="15" fill="rgb(227,1,9)"/><text x="80.0980%" y="143.50"></text></g><g><title>0x00007F654AFA2CBA [libc.so.6] (22 samples, 0.10%)</title><rect x="79.9685%" y="133" width="0.1019%" height="15" fill="rgb(248,47,43)"/><text x="80.2185%" y="143.50"></text></g><g><title>0x00007F654AFA2DF4 [libc.so.6] (33 samples, 0.15%)</title><rect x="80.4226%" y="133" width="0.1529%" height="15" fill="rgb(221,10,30)"/><text x="80.6726%" y="143.50"></text></g><g><title>__libc_calloc [libc.so.6] (883 samples, 4.09%)</title><rect x="76.6878%" y="149" width="4.0916%" height="15" fill="rgb(210,229,1)"/><text x="76.9378%" y="159.50">__li..</text></g><g><title>BST_Search [benchmark_igraph_degree_sequence_game] (633 samples, 2.93%)</title><rect x="82.2483%" y="133" width="2.9331%" height="15" fill="rgb(222,148,37)"/><text x="82.4983%" y="143.50">BS..</text></g><g><title>BST_Search [benchmark_igraph_degree_sequence_game] (214 samples, 0.99%)</title><rect x="84.1898%" y="117" width="0.9916%" height="15" fill="rgb(234,67,33)"/><text x="84.4398%" y="127.50"></text></g><g><title>BST_Search [benchmark_igraph_degree_sequence_game] (43 samples, 0.20%)</title><rect x="84.9822%" y="101" width="0.1992%" height="15" fill="rgb(247,98,35)"/><text x="85.2322%" y="111.50"></text></g><g><title>igraph_set_add [benchmark_igraph_degree_sequence_game] (3,279 samples, 15.19%)</title><rect x="69.9921%" y="165" width="15.1939%" height="15" fill="rgb(247,138,52)"/><text x="70.2421%" y="175.50">igraph_set_add [benchma..</text></g><g><title>igraph_set_contains [benchmark_igraph_degree_sequence_game] (951 samples, 4.41%)</title><rect x="80.7794%" y="149" width="4.4067%" height="15" fill="rgb(213,79,30)"/><text x="81.0294%" y="159.50">igrap..</text></g><g><title>BST_Search [benchmark_igraph_degree_sequence_game] (503 samples, 2.33%)</title><rect x="86.1360%" y="149" width="2.3308%" height="15" fill="rgb(246,177,23)"/><text x="86.3860%" y="159.50">B..</text></g><g><title>BST_Search [benchmark_igraph_degree_sequence_game] (192 samples, 0.89%)</title><rect x="87.5770%" y="133" width="0.8897%" height="15" fill="rgb(230,62,27)"/><text x="87.8270%" y="143.50"></text></g><g><title>BST_Search [benchmark_igraph_degree_sequence_game] (43 samples, 0.20%)</title><rect x="88.2675%" y="117" width="0.1992%" height="15" fill="rgb(216,154,8)"/><text x="88.5175%" y="127.50"></text></g><g><title>igraph_set_contains [benchmark_igraph_degree_sequence_game] (709 samples, 3.29%)</title><rect x="85.1860%" y="165" width="3.2853%" height="15" fill="rgb(244,35,45)"/><text x="85.4360%" y="175.50">igr..</text></g><g><title>0x0000560D353D4930 [benchmark_igraph_degree_sequence_game] (36 samples, 0.17%)</title><rect x="96.6591%" y="149" width="0.1668%" height="15" fill="rgb(251,115,12)"/><text x="96.9091%" y="159.50"></text></g><g><title>0x00007F654AFA1731 [libc.so.6] (36 samples, 0.17%)</title><rect x="97.7805%" y="133" width="0.1668%" height="15" fill="rgb(240,54,50)"/><text x="98.0305%" y="143.50"></text></g><g><title>0x00007F654AFA174F [libc.so.6] (37 samples, 0.17%)</title><rect x="97.9704%" y="133" width="0.1714%" height="15" fill="rgb(233,84,52)"/><text x="98.2204%" y="143.50"></text></g><g><title>0x00007F654AFA1785 [libc.so.6] (24 samples, 0.11%)</title><rect x="98.2207%" y="133" width="0.1112%" height="15" fill="rgb(207,117,47)"/><text x="98.4707%" y="143.50"></text></g><g><title>0x00007F654AFA17BF [libc.so.6] (53 samples, 0.25%)</title><rect x="98.5033%" y="133" width="0.2456%" height="15" fill="rgb(249,43,39)"/><text x="98.7533%" y="143.50"></text></g><g><title>0x00007F654AFA1822 [libc.so.6] (25 samples, 0.12%)</title><rect x="99.1891%" y="133" width="0.1158%" height="15" fill="rgb(209,38,44)"/><text x="99.4391%" y="143.50"></text></g><g><title>0x00007F654AFA184A [libc.so.6] (25 samples, 0.12%)</title><rect x="99.4996%" y="133" width="0.1158%" height="15" fill="rgb(236,212,23)"/><text x="99.7496%" y="143.50"></text></g><g><title>igraph_set_destroy [benchmark_igraph_degree_sequence_game] (2,460 samples, 11.40%)</title><rect x="88.4713%" y="165" width="11.3989%" height="15" fill="rgb(242,79,21)"/><text x="88.7213%" y="175.50">igraph_set_destro..</text></g><g><title>free [libc.so.6] (657 samples, 3.04%)</title><rect x="96.8259%" y="149" width="3.0443%" height="15" fill="rgb(211,96,35)"/><text x="97.0759%" y="159.50">fre..</text></g><g><title>igraph_degree_sequence_game [benchmark_igraph_degree_sequence_game] (21,553 samples, 99.87%)</title><rect x="0.0185%" y="197" width="99.8703%" height="15" fill="rgb(253,215,40)"/><text x="0.2685%" y="207.50">igraph_degree_sequence_game [benchmark_igraph_degree_sequence_game]</text></g><g><title>igraph_i_degree_sequence_game_configuration_simple_undirected [benchmark_igraph_degree_sequence_game] (10,371 samples, 48.06%)</title><rect x="51.8326%" y="181" width="48.0562%" height="15" fill="rgb(211,81,21)"/><text x="52.0826%" y="191.50">igraph_i_degree_sequence_game_configuration_simple_undirected [benchmark_igraph..</text></g><g><title>all (21,581 samples, 100%)</title><rect x="0.0000%" y="309" width="100.0000%" height="15" fill="rgb(208,190,38)"/><text x="0.2500%" y="319.50"></text></g><g><title>benchmark_igraph_degree_sequence_game [PID=121501] (21,581 samples, 100.00%)</title><rect x="0.0000%" y="293" width="100.0000%" height="15" fill="rgb(235,213,38)"/><text x="0.2500%" y="303.50">benchmark_igraph_degree_sequence_game [PID=121501]</text></g><g><title>[MAIN_THREAD] (21,581 samples, 100.00%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(237,122,38)"/><text x="0.2500%" y="287.50">[MAIN_THREAD]</text></g><g><title>_start [benchmark_igraph_degree_sequence_game] (21,580 samples, 100.00%)</title><rect x="0.0046%" y="261" width="99.9954%" height="15" fill="rgb(244,218,35)"/><text x="0.2546%" y="271.50">_start [benchmark_igraph_degree_sequence_game]</text></g><g><title>__libc_start_main [libc.so.6] (21,580 samples, 100.00%)</title><rect x="0.0046%" y="245" width="99.9954%" height="15" fill="rgb(240,68,47)"/><text x="0.2546%" y="255.50">__libc_start_main [libc.so.6]</text></g><g><title>0x00007F654AF28D8F [libc.so.6] (21,580 samples, 100.00%)</title><rect x="0.0046%" y="229" width="99.9954%" height="15" fill="rgb(210,16,53)"/><text x="0.2546%" y="239.50">0x00007F654AF28D8F [libc.so.6]</text></g><g><title>main [benchmark_igraph_degree_sequence_game] (21,580 samples, 100.00%)</title><rect x="0.0046%" y="213" width="99.9954%" height="15" fill="rgb(235,124,12)"/><text x="0.2546%" y="223.50">main [benchmark_igraph_degree_sequence_game]</text></g></svg></svg>