parameters:
  - name: int_blas
    type: boolean
    default: true
  - name: int_lapack
    type: boolean
    default: true
  - name: int_arpack
    type: boolean
    default: true
  - name: int_gmp
    type: boolean
    default: true
  - name: int_glpk
    type: boolean
    default: true
  - name: verify_finally
    type: boolean
    default: true
  - name: build_shared
    type: boolean
    default: false
  - name: enable_tls
    type: boolean
    default: true
  - name: build_type
    type: string
    default: 'Release'
  - name: extra_cmake_args
    type: string
    default: ''
  - name: extra_ctest_args
    type: string
    default: ''
  - name: use_ccache
    type: boolean
    default: true
  - name: print_arith_header
    type: boolean
    default: true
  - name: vcpkg_target_triplet
    type: string
    default: 'x64-windows-static-md'
  - name: vsver # for choosing a VS toolset, see https://en.wikipedia.org/wiki/Microsoft_Visual_C%2B%2B#Internal_version_numbering
    type: string
    default: '14.1' # VS2017

steps:
  - task: Cache@2
    inputs:
      key: >-
        vcpkg-installed
        | $(Agent.Os)
        | ${{ parameters.vcpkg_target_triplet }}
      path: $(VCPKG_INSTALLATION_ROOT)\installed
      cacheHitVar: VcpkgRestoredFromCache
    displayName: Vcpkg Cache

  - script: |
      choco install winflexbison3 ninja ccache

      %VCPKG_INSTALLATION_ROOT%\vcpkg.exe integrate install

      %VCPKG_INSTALLATION_ROOT%\vcpkg.exe install libxml2:${{ parameters.vcpkg_target_triplet }}

    displayName: Install dependencies

  - task: Cache@2
    condition: eq('${{ parameters.use_ccache }}', true)
    inputs:
      key: 'ccache | "$(Agent.OS)" | "$(Agent.JobName)" | "$(Build.SourceBranch)" | "$(Build.SourceVersion)"'
      restoreKeys: |
        ccache | "$(Agent.OS)" | "$(Agent.JobName)" | "$(Build.SourceBranch)"
      path: $(CCACHE_DIR)
    displayName: Ccache

  # Notes:
  #  - We call vcvarsall.bat to make sure the compiler (cl.exe) is in the path, and so that we can select the desired MSVC version.
  #      https://docs.microsoft.com/en-us/cpp/build/building-on-the-command-line?view=msvc-170#vcvarsall-syntax
  #      This is necessary when not using the Visual Studio CMake generator.
  #      Location for VS2019:
  #        C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvarsall.bat
  #      Location for VS2022:
  #        C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvarsall.bat
  #      See https://en.wikipedia.org/wiki/Microsoft_Visual_C%2B%2B#Internal_version_numbering for setting the value of -vcvars_ver
  #  - Due to this setup, CMake must also be called in the same script instead of using the CMake task
  #  - We must set CXX and CC so that CMake would not accidentally pick up another compiler.
  #  - With the above, we can use the Ninja generator, which enables much faster build times than the VS one due to better parallelization.
  #  - We need to add the bin directory to the path to be able to find the libxml2 dependency.
  - script: |
      md build
      cd build

      call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvarsall.bat" x64 -vcvars_ver=${{ parameters.vsver }}

      set CXX=cl.exe
      set CC=cl.exe

      cmake .. -DCMAKE_PREFIX_PATH=%CONDA%\Library\lib ^
               -DIGRAPH_USE_INTERNAL_BLAS=${{ parameters.int_blas }} ^
               -DIGRAPH_USE_INTERNAL_LAPACK=${{ parameters.int_lapack }} ^
               -DIGRAPH_USE_INTERNAL_ARPACK=${{ parameters.int_arpack }} ^
               -DIGRAPH_USE_INTERNAL_GLPK=${{ parameters.int_glpk }} ^
               -DIGRAPH_USE_INTERNAL_GMP=${{ parameters.int_gmp }} ^
               -DIGRAPH_VERIFY_FINALLY_STACK=${{ parameters.verify_finally }} ^
               -DBUILD_SHARED_LIBS=${{ parameters.build_shared }} ^
               -DIGRAPH_ENABLE_TLS=${{ parameters.enable_tls }} ^
               -DCMAKE_BUILD_TYPE=${{ parameters.build_type }} ^
               -DUSE_CCACHE=${{ parameters.use_ccache }} ^
               -DIGRAPH_PRINT_ARITH_HEADER=${{ parameters.print_arith_header }} ^
               -DVCPKG_TARGET_TRIPLET=${{ parameters.vcpkg_target_triplet }} ^
               -DCMAKE_TOOLCHAIN_FILE=%VCPKG_INSTALLATION_ROOT%/scripts/buildsystems/vcpkg.cmake ^
               -DFLEX_KEEP_LINE_NUMBERS=ON ^
               ${{ parameters.extra_cmake_args }}

      cmake --build . --target build_tests
    displayName: Configure and build

  - script: cd build && ctest -j 4 --output-on-failure ${{ parameters.extra_ctest_args }} --timeout 60
    displayName: Test

  - script: ccache -s
    displayName: Ccache statistics
